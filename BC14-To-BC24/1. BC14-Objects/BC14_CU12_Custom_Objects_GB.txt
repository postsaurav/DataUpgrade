OBJECT Table 14 Location
{
  OBJECT-PROPERTIES
  {
    Date=08/24/24;
    Time=12:36:52 PM;
    Modified=Yes;
    Version List=NAVW114.00,UPGDemo;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Name;
    OnDelete=VAR
               TransferRoute@1000 : Record 5742;
               WhseEmployee@1003 : Record 7301;
               WorkCenter@1004 : Record 99000754;
               StockkeepingUnit@1001 : Record 5700;
             BEGIN
               StockkeepingUnit.SETRANGE("Location Code",Code);
               IF NOT StockkeepingUnit.ISEMPTY THEN
                 ERROR(CannotDeleteLocSKUExistErr,Code);

               WMSCheckWarehouse;

               TransferRoute.SETRANGE("Transfer-from Code",Code);
               TransferRoute.DELETEALL;
               TransferRoute.RESET;
               TransferRoute.SETRANGE("Transfer-to Code",Code);
               TransferRoute.DELETEALL;

               WhseEmployee.SETRANGE("Location Code",Code);
               WhseEmployee.DELETEALL(TRUE);

               WorkCenter.SETRANGE("Location Code",Code);
               IF WorkCenter.FINDSET(TRUE) THEN
                 REPEAT
                   WorkCenter.VALIDATE("Location Code",'');
                   WorkCenter.MODIFY(TRUE);
                 UNTIL WorkCenter.NEXT = 0;

               CalendarManagement.DeleteCustomizedBaseCalendarData(CustomizedCalendarChange."Source Type"::Location,Code);
             END;

    OnRename=BEGIN
               CalendarManagement.RenameCustomizedBaseCalendarData(CustomizedCalendarChange."Source Type"::Location,Code,xRec.Code);
             END;

    CaptionML=[ENU=Location;
               ENG=Location];
    LookupPageID=Page15;
    DrillDownPageID=Page15;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=[ENU=Code;
                                                              ENG=Code];
                                                   NotBlank=Yes }
    { 2   ;   ;Name                ;Text100       ;CaptionML=[ENU=Name;
                                                              ENG=Name] }
    { 130 ;   ;Default Bin Code    ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   CaptionML=[ENU=Default Bin Code;
                                                              ENG=Default Bin Code] }
    { 5700;   ;Name 2              ;Text50        ;CaptionML=[ENU=Name 2;
                                                              ENG=Name 2] }
    { 5701;   ;Address             ;Text100       ;CaptionML=[ENU=Address;
                                                              ENG=Address] }
    { 5702;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              ENG=Address 2] }
    { 5703;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode(City,"Post Code",County,"Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              ENG=City] }
    { 5704;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              ENG=Phone No.] }
    { 5705;   ;Phone No. 2         ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No. 2;
                                                              ENG=Phone No. 2] }
    { 5706;   ;Telex No.           ;Text30        ;CaptionML=[ENU=Telex No.;
                                                              ENG=Telex No.] }
    { 5707;   ;Fax No.             ;Text30        ;CaptionML=[ENU=Fax No.;
                                                              ENG=Fax No.] }
    { 5713;   ;Contact             ;Text100       ;CaptionML=[ENU=Contact;
                                                              ENG=Contact] }
    { 5714;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode(City,"Post Code",County,"Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              ENG=Postcode] }
    { 5715;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              ENG=County];
                                                   CaptionClass='5,1,' + "Country/Region Code" }
    { 5718;   ;E-Mail              ;Text80        ;OnValidate=VAR
                                                                MailManagement@1000 : Codeunit 9520;
                                                              BEGIN
                                                                MailManagement.ValidateEmailAddressField("E-Mail");
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=Email;
                                                              ENG=Email] }
    { 5719;   ;Home Page           ;Text90        ;ExtendedDatatype=URL;
                                                   CaptionML=[ENU=Home Page;
                                                              ENG=Home Page] }
    { 5720;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                PostCode.CheckClearPostCodeCityCounty(City,"Post Code",County,"Country/Region Code",xRec."Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Country/Region Code;
                                                              ENG=Country/Region Code] }
    { 5724;   ;Use As In-Transit   ;Boolean       ;OnValidate=BEGIN
                                                                IF "Use As In-Transit" THEN BEGIN
                                                                  TESTFIELD("Require Put-away",FALSE);
                                                                  TESTFIELD("Require Pick",FALSE);
                                                                  TESTFIELD("Use Cross-Docking",FALSE);
                                                                  TESTFIELD("Require Receive",FALSE);
                                                                  TESTFIELD("Require Shipment",FALSE);
                                                                  TESTFIELD("Bin Mandatory",FALSE);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 5740=R;
                                                   CaptionML=[ENU=Use As In-Transit;
                                                              ENG=Use As In-Transit] }
    { 5726;   ;Require Put-away    ;Boolean       ;OnValidate=VAR
                                                                WhseActivHeader@1000 : Record 5766;
                                                                WhseRcptHeader@1001 : Record 7316;
                                                              BEGIN
                                                                WhseRcptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseRcptHeader.ISEMPTY THEN
                                                                  ERROR(Text008,FIELDCAPTION("Require Put-away"),xRec."Require Put-away",WhseRcptHeader.TABLECAPTION);

                                                                IF NOT "Require Put-away" THEN BEGIN
                                                                  TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                  WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::"Put-away");
                                                                  WhseActivHeader.SETRANGE("Location Code",Code);
                                                                  IF NOT WhseActivHeader.ISEMPTY THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Put-away"),TRUE,WhseActivHeader.TABLECAPTION);
                                                                  "Use Cross-Docking" := FALSE;
                                                                  "Cross-Dock Bin Code" := '';
                                                                END ELSE
                                                                  CreateInboundWhseRequest;
                                                              END;

                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Require Put-away;
                                                              ENG=Require Put-away] }
    { 5727;   ;Require Pick        ;Boolean       ;OnValidate=VAR
                                                                WhseActivHeader@1000 : Record 5766;
                                                                WhseShptHeader@1001 : Record 7320;
                                                              BEGIN
                                                                WhseShptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseShptHeader.ISEMPTY THEN
                                                                  ERROR(Text008,FIELDCAPTION("Require Pick"),xRec."Require Pick",WhseShptHeader.TABLECAPTION);

                                                                IF NOT "Require Pick" THEN BEGIN
                                                                  TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                  WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::Pick);
                                                                  WhseActivHeader.SETRANGE("Location Code",Code);
                                                                  IF NOT WhseActivHeader.ISEMPTY THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Pick"),TRUE,WhseActivHeader.TABLECAPTION);
                                                                  "Use Cross-Docking" := FALSE;
                                                                  "Cross-Dock Bin Code" := '';
                                                                  "Pick According to FEFO" := FALSE;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Require Pick;
                                                              ENG=Require Pick] }
    { 5728;   ;Cross-Dock Due Date Calc.;DateFormula;
                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Cross-Dock Due Date Calc.;
                                                              ENG=Cross-Dock Due Date Calc.] }
    { 5729;   ;Use Cross-Docking   ;Boolean       ;OnValidate=BEGIN
                                                                IF "Use Cross-Docking" THEN BEGIN
                                                                  TESTFIELD("Require Receive");
                                                                  TESTFIELD("Require Shipment");
                                                                  TESTFIELD("Require Put-away");
                                                                  TESTFIELD("Require Pick");
                                                                END ELSE
                                                                  "Cross-Dock Bin Code" := '';
                                                              END;

                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Use Cross-Docking;
                                                              ENG=Use Cross-Docking] }
    { 5730;   ;Require Receive     ;Boolean       ;OnValidate=VAR
                                                                WhseRcptHeader@1000 : Record 7316;
                                                                WhseActivHeader@1001 : Record 5766;
                                                              BEGIN
                                                                IF NOT "Require Receive" THEN BEGIN
                                                                  TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                  WhseRcptHeader.SETRANGE("Location Code",Code);
                                                                  IF NOT WhseRcptHeader.ISEMPTY THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Receive"),TRUE,WhseRcptHeader.TABLECAPTION);
                                                                  "Receipt Bin Code" := '';
                                                                  "Use Cross-Docking" := FALSE;
                                                                  "Cross-Dock Bin Code" := '';
                                                                END ELSE BEGIN
                                                                  WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::"Put-away");
                                                                  WhseActivHeader.SETRANGE("Location Code",Code);
                                                                  IF NOT WhseActivHeader.ISEMPTY THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Receive"),FALSE,WhseActivHeader.TABLECAPTION);

                                                                  CreateInboundWhseRequest;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 7316=R;
                                                   CaptionML=[ENU=Require Receive;
                                                              ENG=Require Receive] }
    { 5731;   ;Require Shipment    ;Boolean       ;OnValidate=VAR
                                                                WhseShptHeader@1000 : Record 7320;
                                                                WhseActivHeader@1001 : Record 5766;
                                                              BEGIN
                                                                IF NOT "Require Shipment" THEN BEGIN
                                                                  TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                  WhseShptHeader.SETRANGE("Location Code",Code);
                                                                  IF NOT WhseShptHeader.ISEMPTY THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Shipment"),TRUE,WhseShptHeader.TABLECAPTION);
                                                                  "Shipment Bin Code" := '';
                                                                  "Use Cross-Docking" := FALSE;
                                                                  "Cross-Dock Bin Code" := '';
                                                                END ELSE BEGIN
                                                                  WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::Pick);
                                                                  WhseActivHeader.SETRANGE("Location Code",Code);
                                                                  IF NOT WhseActivHeader.ISEMPTY THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Shipment"),FALSE,WhseActivHeader.TABLECAPTION);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 7320=R;
                                                   CaptionML=[ENU=Require Shipment;
                                                              ENG=Require Shipment] }
    { 5732;   ;Bin Mandatory       ;Boolean       ;OnValidate=VAR
                                                                ItemLedgEntry@1004 : Record 32;
                                                                WhseEntry@1000 : Record 7312;
                                                                WhseActivHeader@1001 : Record 5766;
                                                                WhseShptHeader@1002 : Record 7320;
                                                                WhseRcptHeader@1003 : Record 7316;
                                                                WhseIntegrationMgt@1006 : Codeunit 7317;
                                                                Window@1005 : Dialog;
                                                              BEGIN
                                                                IF "Bin Mandatory" AND NOT xRec."Bin Mandatory" THEN BEGIN
                                                                  Window.OPEN(Text010);
                                                                  ItemLedgEntry.SETRANGE(Open,TRUE);
                                                                  ItemLedgEntry.SETRANGE("Location Code",Code);
                                                                  IF NOT ItemLedgEntry.ISEMPTY THEN
                                                                    ERROR(Text009,FIELDCAPTION("Bin Mandatory"));

                                                                  "Default Bin Selection" := "Default Bin Selection"::"Fixed Bin";
                                                                END;

                                                                WhseActivHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseActivHeader.ISEMPTY THEN
                                                                  ERROR(Text008,FIELDCAPTION("Bin Mandatory"),xRec."Bin Mandatory",WhseActivHeader.TABLECAPTION);

                                                                WhseRcptHeader.SETCURRENTKEY("Location Code");
                                                                WhseRcptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseRcptHeader.ISEMPTY THEN
                                                                  ERROR(Text008,FIELDCAPTION("Bin Mandatory"),xRec."Bin Mandatory",WhseRcptHeader.TABLECAPTION);

                                                                WhseShptHeader.SETCURRENTKEY("Location Code");
                                                                WhseShptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseShptHeader.ISEMPTY THEN
                                                                  ERROR(Text008,FIELDCAPTION("Bin Mandatory"),xRec."Bin Mandatory",WhseShptHeader.TABLECAPTION);

                                                                IF NOT "Bin Mandatory" AND xRec."Bin Mandatory" THEN BEGIN
                                                                  WhseEntry.SETRANGE("Location Code",Code);
                                                                  WhseEntry.CALCSUMS("Qty. (Base)");
                                                                  IF WhseEntry."Qty. (Base)" <> 0 THEN
                                                                    ERROR(Text002,FIELDCAPTION("Bin Mandatory"));
                                                                END;

                                                                IF NOT "Bin Mandatory" THEN BEGIN
                                                                  "Open Shop Floor Bin Code" := '';
                                                                  "To-Production Bin Code" := '';
                                                                  "From-Production Bin Code" := '';
                                                                  "Adjustment Bin Code" := '';
                                                                  "Receipt Bin Code" := '';
                                                                  "Shipment Bin Code" := '';
                                                                  "Cross-Dock Bin Code" := '';
                                                                  "To-Assembly Bin Code" := '';
                                                                  "From-Assembly Bin Code" := '';
                                                                  WhseIntegrationMgt.CheckLocationOnManufBins(Rec);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Bin Mandatory;
                                                              ENG=Bin Mandatory] }
    { 5733;   ;Directed Put-away and Pick;Boolean ;OnValidate=VAR
                                                                WhseActivHeader@1002 : Record 5766;
                                                                WhseShptHeader@1001 : Record 7320;
                                                                WhseRcptHeader@1000 : Record 7316;
                                                              BEGIN
                                                                WhseActivHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseActivHeader.ISEMPTY THEN
                                                                  ERROR(Text014,FIELDCAPTION("Directed Put-away and Pick"),WhseActivHeader.TABLECAPTION);

                                                                WhseRcptHeader.SETCURRENTKEY("Location Code");
                                                                WhseRcptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseRcptHeader.ISEMPTY THEN
                                                                  ERROR(Text014,FIELDCAPTION("Directed Put-away and Pick"),WhseRcptHeader.TABLECAPTION);

                                                                WhseShptHeader.SETCURRENTKEY("Location Code");
                                                                WhseShptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseShptHeader.ISEMPTY THEN
                                                                  ERROR(Text014,FIELDCAPTION("Directed Put-away and Pick"),WhseShptHeader.TABLECAPTION);

                                                                IF "Directed Put-away and Pick" THEN BEGIN
                                                                  TESTFIELD("Use As In-Transit",FALSE);
                                                                  TESTFIELD("Bin Mandatory");
                                                                  VALIDATE("Require Receive",TRUE);
                                                                  VALIDATE("Require Shipment",TRUE);
                                                                  VALIDATE("Require Put-away",TRUE);
                                                                  VALIDATE("Require Pick",TRUE);
                                                                  VALIDATE("Use Cross-Docking",TRUE);
                                                                  "Default Bin Selection" := "Default Bin Selection"::" ";
                                                                END ELSE
                                                                  VALIDATE("Adjustment Bin Code",'');

                                                                IF (NOT "Directed Put-away and Pick") AND xRec."Directed Put-away and Pick" THEN BEGIN
                                                                  "Default Bin Selection" := "Default Bin Selection"::"Fixed Bin";
                                                                  "Use Put-away Worksheet" := FALSE;
                                                                  VALIDATE("Use Cross-Docking",FALSE);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Directed Put-away and Pick;
                                                              ENG=Directed Put-away and Pick] }
    { 5734;   ;Default Bin Selection;Option       ;OnValidate=BEGIN
                                                                IF ("Default Bin Selection" <> xRec."Default Bin Selection") AND ("Default Bin Selection" = "Default Bin Selection"::" ") THEN
                                                                  TESTFIELD("Directed Put-away and Pick");
                                                              END;

                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Default Bin Selection;
                                                              ENG=Default Bin Selection];
                                                   OptionCaptionML=[ENU=" ,Fixed Bin,Last-Used Bin";
                                                                    ENG=" ,Fixed Bin,Last-Used Bin"];
                                                   OptionString=[ ,Fixed Bin,Last-Used Bin] }
    { 5790;   ;Outbound Whse. Handling Time;DateFormula;
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Outbound Whse. Handling Time;
                                                              ENG=Outbound Whse. Handling Time] }
    { 5791;   ;Inbound Whse. Handling Time;DateFormula;
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Inbound Whse. Handling Time;
                                                              ENG=Inbound Whse. Handling Time] }
    { 7305;   ;Put-away Template Code;Code10      ;TableRelation="Put-away Template Header";
                                                   CaptionML=[ENU=Put-away Template Code;
                                                              ENG=Put-away Template Code] }
    { 7306;   ;Use Put-away Worksheet;Boolean     ;AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Use Put-away Worksheet;
                                                              ENG=Use Put-away Worksheet] }
    { 7307;   ;Pick According to FEFO;Boolean     ;AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Pick According to FEFO;
                                                              ENG=Pick According to FEFO] }
    { 7308;   ;Allow Breakbulk     ;Boolean       ;AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Allow Breakbulk;
                                                              ENG=Allow Breakbulk] }
    { 7309;   ;Bin Capacity Policy ;Option        ;AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Bin Capacity Policy;
                                                              ENG=Bin Capacity Policy];
                                                   OptionCaptionML=[ENU=Never Check Capacity,Allow More Than Max. Capacity,Prohibit More Than Max. Cap.;
                                                                    ENG=Never Check Capacity,Allow More Than Max. Capacity,Prohibit More Than Max. Cap.];
                                                   OptionString=Never Check Capacity,Allow More Than Max. Capacity,Prohibit More Than Max. Cap. }
    { 7313;   ;Open Shop Floor Bin Code;Code20    ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "Open Shop Floor Bin Code",
                                                                  FIELDCAPTION("Open Shop Floor Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=[ENU=Open Shop Floor Bin Code;
                                                              ENG=Open Shop Floor Bin Code] }
    { 7314;   ;To-Production Bin Code;Code20      ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "To-Production Bin Code",
                                                                  FIELDCAPTION("To-Production Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=[ENU=To-Production Bin Code;
                                                              ENG=To-Production Bin Code] }
    { 7315;   ;From-Production Bin Code;Code20    ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "From-Production Bin Code",
                                                                  FIELDCAPTION("From-Production Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=[ENU=From-Production Bin Code;
                                                              ENG=From-Production Bin Code] }
    { 7317;   ;Adjustment Bin Code ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=BEGIN
                                                                IF "Adjustment Bin Code" <> xRec."Adjustment Bin Code" THEN BEGIN
                                                                  IF "Adjustment Bin Code" = '' THEN
                                                                    CheckEmptyBin(
                                                                      xRec."Adjustment Bin Code",FIELDCAPTION("Adjustment Bin Code"))
                                                                  ELSE
                                                                    CheckEmptyBin(
                                                                      "Adjustment Bin Code",FIELDCAPTION("Adjustment Bin Code"));

                                                                  CheckWhseAdjmtJnl;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Adjustment Bin Code;
                                                              ENG=Adjustment Bin Code] }
    { 7319;   ;Always Create Put-away Line;Boolean;AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Always Create Put-away Line;
                                                              ENG=Always Create Put-away Line] }
    { 7320;   ;Always Create Pick Line;Boolean    ;AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Always Create Pick Line;
                                                              ENG=Always Create Pick Line] }
    { 7321;   ;Special Equipment   ;Option        ;AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Special Equipment;
                                                              ENG=Special Equipment];
                                                   OptionCaptionML=[ENU=" ,According to Bin,According to SKU/Item";
                                                                    ENG=" ,According to Bin,According to SKU/Item"];
                                                   OptionString=[ ,According to Bin,According to SKU/Item] }
    { 7323;   ;Receipt Bin Code    ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   CaptionML=[ENU=Receipt Bin Code;
                                                              ENG=Receipt Bin Code] }
    { 7325;   ;Shipment Bin Code   ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   CaptionML=[ENU=Shipment Bin Code;
                                                              ENG=Shipment Bin Code] }
    { 7326;   ;Cross-Dock Bin Code ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   CaptionML=[ENU=Cross-Dock Bin Code;
                                                              ENG=Cross-Dock Bin Code] }
    { 7330;   ;To-Assembly Bin Code;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "To-Assembly Bin Code",
                                                                  FIELDCAPTION("To-Assembly Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=[ENU=To-Assembly Bin Code;
                                                              ENG=To-Assembly Bin Code] }
    { 7331;   ;From-Assembly Bin Code;Code20      ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "From-Assembly Bin Code",
                                                                  FIELDCAPTION("From-Assembly Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=[ENU=From-Assembly Bin Code;
                                                              ENG=From-Assembly Bin Code] }
    { 7332;   ;Asm.-to-Order Shpt. Bin Code;Code20;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "Asm.-to-Order Shpt. Bin Code",
                                                                  FIELDCAPTION("Asm.-to-Order Shpt. Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=[ENU=Asm.-to-Order Shpt. Bin Code;
                                                              ENG=Asm.-to-Order Shpt. Bin Code] }
    { 7600;   ;Base Calendar Code  ;Code10        ;TableRelation="Base Calendar";
                                                   CaptionML=[ENU=Base Calendar Code;
                                                              ENG=Base Calendar Code] }
    { 7700;   ;Use ADCS            ;Boolean       ;AccessByPermission=TableData 7700=R;
                                                   CaptionML=[ENU=Use ADCS;
                                                              ENG=Use ADCS] }
    { 50000;  ;Shop                ;Code20        ;DataClassification=ToBeClassified }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Name                                     }
    {    ;Use As In-Transit,Bin Mandatory          }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Bin@1000 : Record 7354;
      PostCode@1001 : Record 225;
      WhseSetup@1002 : Record 5769;
      InvtSetup@1003 : Record 313;
      Location@1004 : Record 14;
      CustomizedCalendarChange@1023 : Record 7602;
      Text000@1005 : TextConst 'ENU=You cannot delete the %1 %2, because they contain items.;ENG=You cannot delete the %1 %2, because they contain items.';
      Text001@1006 : TextConst 'ENU=You cannot delete the %1 %2, because one or more Warehouse Activity Lines exist for this %1.;ENG=You cannot delete the %1 %2, because one or more Warehouse Activity Lines exist for this %1.';
      Text002@1007 : TextConst 'ENU=%1 must be Yes, because the bins contain items.;ENG=%1 must be Yes, because the bins contain items.';
      Text003@1009 : TextConst 'ENU=Cancelled.;ENG=Cancelled.';
      Text004@1010 : TextConst 'ENU=The total quantity of items in the warehouse is 0, but the Adjustment Bin contains a negative quantity and other bins contain a positive quantity.\;ENG=The total quantity of items in the warehouse is 0, but the Adjustment Bin contains a negative quantity and other bins contain a positive quantity.\';
      Text005@1012 : TextConst 'ENU=Do you still want to delete this %1?;ENG=Do you still want to delete this %1?';
      Text006@1011 : TextConst 'ENU=You cannot change the %1 until the inventory stored in %2 %3 is 0.;ENG=You cannot change the %1 until the inventory stored in %2 %3 is 0.';
      Text007@1013 : TextConst 'ENU=You have to delete all Adjustment Warehouse Journal Lines first before you can change the %1.;ENG=You have to delete all Adjustment Warehouse Journal Lines first before you can change the %1.';
      Text008@1008 : TextConst 'ENU=%1 must be %2, because one or more %3 exist.;ENG=%1 must be %2, because one or more %3 exist.';
      Text009@1014 : TextConst 'ENU=You cannot change %1 because there are one or more open ledger entries on this location.;ENG=You cannot change %1 because there are one or more open ledger entries on this location.';
      Text010@1015 : TextConst 'ENU=Checking item ledger entries for open entries...;ENG=Checking item ledger entries for open entries...';
      Text011@1016 : TextConst 'ENU=You cannot change the %1 to %2 until the inventory stored in this bin is 0.;ENG=You cannot change the %1 to %2 until the inventory stored in this bin is 0.';
      Text012@1017 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.;ENG=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      Text013@1018 : TextConst 'ENU=You cannot delete %1 because there are one or more ledger entries on this location.;ENG=You cannot delete %1 because there are one or more ledger entries on this location.';
      Text014@1019 : TextConst 'ENU=You cannot change %1 because one or more %2 exist.;ENG=You cannot change %1 because one or more %2 exist.';
      CannotDeleteLocSKUExistErr@1021 : TextConst '@@@=%1: Field(Code);ENU=You cannot delete %1 because one or more stockkeeping units exist at this location.;ENG=You cannot delete %1 because one or more stockkeeping units exist at this location.';
      CalendarManagement@1022 : Codeunit 7600;
      UnspecifiedLocationLbl@1020 : TextConst 'ENU=(Unspecified Location);ENG=(Unspecified Location)';

    [External]
    PROCEDURE RequireShipment@5(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Require Shipment");
      WhseSetup.GET;
      EXIT(WhseSetup."Require Shipment");
    END;

    [External]
    PROCEDURE RequirePicking@1(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Require Pick");
      WhseSetup.GET;
      EXIT(WhseSetup."Require Pick");
    END;

    [External]
    PROCEDURE RequireReceive@4(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Require Receive");
      WhseSetup.GET;
      EXIT(WhseSetup."Require Receive");
    END;

    [External]
    PROCEDURE RequirePutaway@2(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Require Put-away");
      WhseSetup.GET;
      EXIT(WhseSetup."Require Put-away");
    END;

    [External]
    PROCEDURE GetLocationSetup@3(LocationCode@1000 : Code[10];VAR Location2@1001 : Record 14) : Boolean;
    BEGIN
      IF NOT GET(LocationCode) THEN
        WITH Location2 DO BEGIN
          INIT;
          WhseSetup.GET;
          InvtSetup.GET;
          Code := LocationCode;
          "Use As In-Transit" := FALSE;
          "Require Put-away" := WhseSetup."Require Put-away";
          "Require Pick" := WhseSetup."Require Pick";
          "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
          "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
          "Require Receive" := WhseSetup."Require Receive";
          "Require Shipment" := WhseSetup."Require Shipment";
          EXIT(FALSE);
        END;

      Location2 := Rec;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE WMSCheckWarehouse@7300();
    VAR
      Zone@1005 : Record 7300;
      Bin@1006 : Record 7354;
      BinContent@1004 : Record 7302;
      WhseActivLine@1003 : Record 5767;
      WarehouseEntry@1002 : Record 7312;
      WarehouseEntry2@1001 : Record 7312;
      WhseJnlLine@1000 : Record 7311;
      ItemLedgerEntry@1007 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Location Code",Code);
      ItemLedgerEntry.SETRANGE(Open,TRUE);
      IF NOT ItemLedgerEntry.ISEMPTY THEN
        ERROR(Text013,Code);

      WarehouseEntry.SETRANGE("Location Code",Code);
      WarehouseEntry.CALCSUMS("Qty. (Base)");
      IF WarehouseEntry."Qty. (Base)" = 0 THEN BEGIN
        IF "Adjustment Bin Code" <> '' THEN BEGIN
          WarehouseEntry2.SETRANGE("Bin Code","Adjustment Bin Code");
          WarehouseEntry2.SETRANGE("Location Code",Code);
          WarehouseEntry2.CALCSUMS("Qty. (Base)");
          IF WarehouseEntry2."Qty. (Base)" < 0 THEN
            IF NOT CONFIRM(Text004 + Text005,FALSE,TABLECAPTION) THEN
              ERROR(Text003)
        END;
      END ELSE
        ERROR(Text000,TABLECAPTION,Code);

      WhseActivLine.SETRANGE("Location Code",Code);
      WhseActivLine.SETRANGE("Activity Type",WhseActivLine."Activity Type"::Movement);
      WhseActivLine.SETFILTER("Qty. Outstanding",'<>0');
      IF NOT WhseActivLine.ISEMPTY THEN
        ERROR(Text001,TABLECAPTION,Code);

      WhseJnlLine.SETRANGE("Location Code",Code);
      WhseJnlLine.SETFILTER(Quantity,'<>0');
      IF NOT WhseJnlLine.ISEMPTY THEN
        ERROR(Text001,TABLECAPTION,Code);

      Zone.SETRANGE("Location Code",Code);
      Zone.DELETEALL;
      Bin.SETRANGE("Location Code",Code);
      Bin.DELETEALL;
      BinContent.SETRANGE("Location Code",Code);
      BinContent.DELETEALL;
    END;

    LOCAL PROCEDURE CheckEmptyBin@7302(BinCode@1001 : Code[20];CaptionOfField@1002 : Text[30]);
    VAR
      WarehouseEntry@1003 : Record 7312;
      WhseEntry2@1000 : Record 7312;
    BEGIN
      WarehouseEntry.SETCURRENTKEY("Bin Code","Location Code","Item No.");
      WarehouseEntry.SETRANGE("Bin Code",BinCode);
      WarehouseEntry.SETRANGE("Location Code",Code);
      IF WarehouseEntry.FINDFIRST THEN
        REPEAT
          WarehouseEntry.SETRANGE("Item No.",WarehouseEntry."Item No.");

          WhseEntry2.SETCURRENTKEY("Item No.","Bin Code","Location Code");
          WhseEntry2.COPYFILTERS(WarehouseEntry);
          WhseEntry2.CALCSUMS("Qty. (Base)");
          IF WhseEntry2."Qty. (Base)" <> 0 THEN BEGIN
            IF (BinCode = "Adjustment Bin Code") AND (xRec."Adjustment Bin Code" = '') THEN
              ERROR(Text011,CaptionOfField,BinCode);

            ERROR(Text006,CaptionOfField,Bin.TABLECAPTION,BinCode);
          END;

          WarehouseEntry.FINDLAST;
          WarehouseEntry.SETRANGE("Item No.");
        UNTIL WarehouseEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckWhseAdjmtJnl@7303();
    VAR
      WhseJnlTemplate@1002 : Record 7309;
      WhseJnlLine@1003 : Record 7311;
    BEGIN
      WhseJnlTemplate.SETRANGE(Type,WhseJnlTemplate.Type::Item);
      IF WhseJnlTemplate.FIND('-') THEN
        REPEAT
          WhseJnlLine.SETRANGE("Journal Template Name",WhseJnlTemplate.Name);
          WhseJnlLine.SETRANGE("Location Code",Code);
          IF NOT WhseJnlLine.ISEMPTY THEN
            ERROR(
              Text007,
              FIELDCAPTION("Adjustment Bin Code"));
        UNTIL WhseJnlTemplate.NEXT = 0;
    END;

    [External]
    PROCEDURE GetRequirementText@6(FieldNumber@1000 : Integer) : Text[50];
    VAR
      Text000@1002 : TextConst 'ENU=Shipment,Receive,Pick,Put-Away;ENG=Shipment,Receive,Pick,Put-Away';
    BEGIN
      CASE FieldNumber OF
        FIELDNO("Require Shipment"):
          EXIT(SELECTSTR(1,Text000));
        FIELDNO("Require Receive"):
          EXIT(SELECTSTR(2,Text000));
        FIELDNO("Require Pick"):
          EXIT(SELECTSTR(3,Text000));
        FIELDNO("Require Put-away"):
          EXIT(SELECTSTR(4,Text000));
      END;
    END;

    [External]
    PROCEDURE DisplayMap@7();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::Location,GETPOSITION)
      ELSE
        MESSAGE(Text012);
    END;

    [External]
    PROCEDURE IsBWReceive@8() : Boolean;
    BEGIN
      EXIT("Bin Mandatory" AND (NOT "Directed Put-away and Pick") AND "Require Receive");
    END;

    [External]
    PROCEDURE IsBWShip@12() : Boolean;
    BEGIN
      EXIT("Bin Mandatory" AND (NOT "Directed Put-away and Pick") AND "Require Shipment");
    END;

    [External]
    PROCEDURE IsBinBWReceiveOrShip@11(BinCode@1000 : Code[20]) : Boolean;
    BEGIN
      EXIT(("Receipt Bin Code" <> '') AND (BinCode = "Receipt Bin Code") OR
        ("Shipment Bin Code" <> '') AND (BinCode = "Shipment Bin Code"));
    END;

    [External]
    PROCEDURE IsInTransit@10(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Use As In-Transit");
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CreateInboundWhseRequest@13();
    VAR
      TransferHeader@1002 : Record 5740;
      TransferLine@1004 : Record 5741;
      WarehouseRequest@1000 : Record 5765;
      WhseTransferRelease@1003 : Codeunit 5773;
    BEGIN
      TransferLine.SETRANGE("Transfer-to Code",Code);
      IF TransferLine.FINDSET THEN
        REPEAT
          IF TransferLine."Quantity Received" <> TransferLine."Quantity Shipped" THEN BEGIN
            TransferHeader.GET(TransferLine."Document No.");
            WhseTransferRelease.InitializeWhseRequest(WarehouseRequest,TransferHeader,TransferHeader.Status);
            WhseTransferRelease.CreateInboundWhseRequest(WarehouseRequest,TransferHeader);

            TransferLine.SETRANGE("Document No.",TransferLine."Document No.");
            TransferLine.FINDLAST;
            TransferLine.SETRANGE("Document No.");
          END;
        UNTIL TransferLine.NEXT = 0;
    END;

    [External]
    PROCEDURE GetLocationsIncludingUnspecifiedLocation@14(IncludeOnlyUnspecifiedLocation@1001 : Boolean;ExcludeInTransitLocations@1000 : Boolean);
    VAR
      Location@1002 : Record 14;
    BEGIN
      INIT;
      VALIDATE(Name,UnspecifiedLocationLbl);
      INSERT;

      IF NOT IncludeOnlyUnspecifiedLocation THEN BEGIN
        IF ExcludeInTransitLocations THEN
          Location.SETRANGE("Use As In-Transit",FALSE);

        IF Location.FINDSET THEN
          REPEAT
            INIT;
            COPY(Location);
            INSERT;
          UNTIL Location.NEXT = 0;
      END;

      FINDFIRST;
    END;

    BEGIN
    END.
  }
}

OBJECT Table 18 Customer
{
  OBJECT-PROPERTIES
  {
    Date=08/24/24;
    Time=12:37:32 PM;
    Modified=Yes;
    Version List=NAVW114.12,NAVGB14.12,UPGDemo;
  }
  PROPERTIES
  {
    Permissions=TableData 21=r,
                TableData 167=r,
                TableData 249=rd,
                TableData 5900=r,
                TableData 5907=r,
                TableData 5940=rm,
                TableData 5965=rm,
                TableData 7002=rd,
                TableData 7004=rd;
    DataCaptionFields=No.,Name;
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 SalesSetup.GET;
                 SalesSetup.TESTFIELD("Customer Nos.");
                 NoSeriesMgt.InitSeries(SalesSetup."Customer Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               IF "Invoice Disc. Code" = '' THEN
                 "Invoice Disc. Code" := "No.";

               IF (NOT (InsertFromContact OR (InsertFromTemplate AND (Contact <> '')) OR ISTEMPORARY)) OR ForceUpdateContact THEN
                 UpdateContFromCust.OnInsert(Rec);

               IF "Salesperson Code" = '' THEN
                 SetDefaultSalesperson;

               DimMgt.UpdateDefaultDim(
                 DATABASE::Customer,"No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");

               UpdateReferencedIds;
               SetLastModifiedDateTime;
             END;

    OnModify=BEGIN
               UpdateReferencedIds;
               SetLastModifiedDateTime;
               IF IsContactUpdateNeeded THEN BEGIN
                 MODIFY;
                 UpdateContFromCust.OnModify(Rec);
                 IF NOT FIND THEN BEGIN
                   RESET;
                   IF FIND THEN;
                 END;
               END;
             END;

    OnDelete=VAR
               CampaignTargetGr@1000 : Record 7030;
               ContactBusRel@1001 : Record 5054;
               Job@1004 : Record 167;
               SocialListeningSearchTopic@1007 : Record 871;
               StdCustSalesCode@1003 : Record 172;
               CustomReportSelection@1008 : Record 9657;
               MyCustomer@1005 : Record 9150;
               ServHeader@1009 : Record 5900;
               CampaignTargetGrMgmt@1002 : Codeunit 7030;
               VATRegistrationLogMgt@1006 : Codeunit 249;
               ConfirmManagement@1010 : Codeunit 27;
             BEGIN
               ApprovalsMgmt.OnCancelCustomerApprovalRequest(Rec);

               ServiceItem.SETRANGE("Customer No.","No.");
               IF ServiceItem.FINDFIRST THEN
                 IF ConfirmManagement.ConfirmProcess(
                      STRSUBSTNO(Text008,TABLECAPTION,"No.",ServiceItem.FIELDCAPTION("Customer No.")),TRUE)
                 THEN
                   ServiceItem.MODIFYALL("Customer No.",'')
                 ELSE
                   ERROR(Text009);

               Job.SETRANGE("Bill-to Customer No.","No.");
               IF NOT Job.ISEMPTY THEN
                 ERROR(Text015,TABLECAPTION,"No.",Job.TABLECAPTION);

               MoveEntries.MoveCustEntries(Rec);

               CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Customer);
               CommentLine.SETRANGE("No.","No.");
               CommentLine.DELETEALL;

               CustBankAcc.SETRANGE("Customer No.","No.");
               CustBankAcc.DELETEALL;

               ShipToAddr.SETRANGE("Customer No.","No.");
               ShipToAddr.DELETEALL;

               SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Customer);
               SalesPrice.SETRANGE("Sales Code","No.");
               SalesPrice.DELETEALL;

               SalesLineDisc.SETRANGE("Sales Type",SalesLineDisc."Sales Type"::Customer);
               SalesLineDisc.SETRANGE("Sales Code","No.");
               SalesLineDisc.DELETEALL;

               SalesPrepmtPct.SETCURRENTKEY("Sales Type","Sales Code");
               SalesPrepmtPct.SETRANGE("Sales Type",SalesPrepmtPct."Sales Type"::Customer);
               SalesPrepmtPct.SETRANGE("Sales Code","No.");
               SalesPrepmtPct.DELETEALL;

               StdCustSalesCode.SETRANGE("Customer No.","No.");
               StdCustSalesCode.DELETEALL(TRUE);

               ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
               ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Customer);
               ItemCrossReference.SETRANGE("Cross-Reference Type No.","No.");
               ItemCrossReference.DELETEALL;

               IF NOT SocialListeningSearchTopic.ISEMPTY THEN BEGIN
                 SocialListeningSearchTopic.FindSearchTopic(SocialListeningSearchTopic."Source Type"::Customer,"No.");
                 SocialListeningSearchTopic.DELETEALL;
               END;

               SalesOrderLine.SETCURRENTKEY("Document Type","Bill-to Customer No.");
               SalesOrderLine.SETRANGE("Bill-to Customer No.","No.");
               IF SalesOrderLine.FINDFIRST THEN
                 ERROR(
                   Text000,
                   TABLECAPTION,"No.",SalesOrderLine."Document Type");

               SalesOrderLine.SETRANGE("Bill-to Customer No.");
               SalesOrderLine.SETRANGE("Sell-to Customer No.","No.");
               IF SalesOrderLine.FINDFIRST THEN
                 ERROR(
                   Text000,
                   TABLECAPTION,"No.",SalesOrderLine."Document Type");

               CampaignTargetGr.SETRANGE("No.","No.");
               CampaignTargetGr.SETRANGE(Type,CampaignTargetGr.Type::Customer);
               IF CampaignTargetGr.FIND('-') THEN BEGIN
                 ContactBusRel.SETRANGE("Link to Table",ContactBusRel."Link to Table"::Customer);
                 ContactBusRel.SETRANGE("No.","No.");
                 ContactBusRel.FINDFIRST;
                 REPEAT
                   CampaignTargetGrMgmt.ConverttoContact(Rec,ContactBusRel."Contact No.");
                 UNTIL CampaignTargetGr.NEXT = 0;
               END;

               ServContract.SETFILTER(Status,'<>%1',ServContract.Status::Canceled);
               ServContract.SETRANGE("Customer No.","No.");
               IF NOT ServContract.ISEMPTY THEN
                 ERROR(
                   Text007,
                   TABLECAPTION,"No.");

               ServContract.SETRANGE(Status);
               ServContract.MODIFYALL("Customer No.",'');

               ServContract.SETFILTER(Status,'<>%1',ServContract.Status::Canceled);
               ServContract.SETRANGE("Bill-to Customer No.","No.");
               IF NOT ServContract.ISEMPTY THEN
                 ERROR(
                   Text007,
                   TABLECAPTION,"No.");

               ServContract.SETRANGE(Status);
               ServContract.MODIFYALL("Bill-to Customer No.",'');

               ServHeader.SETCURRENTKEY("Customer No.","Order Date");
               ServHeader.SETRANGE("Customer No.","No.");
               IF ServHeader.FINDFIRST THEN
                 ERROR(
                   Text013,
                   TABLECAPTION,"No.",ServHeader."Document Type");

               ServHeader.SETRANGE("Bill-to Customer No.");
               IF ServHeader.FINDFIRST THEN
                 ERROR(
                   Text013,
                   TABLECAPTION,"No.",ServHeader."Document Type");

               UpdateContFromCust.OnDelete(Rec);

               CustomReportSelection.SETRANGE("Source Type",DATABASE::Customer);
               CustomReportSelection.SETRANGE("Source No.","No.");
               CustomReportSelection.DELETEALL;

               MyCustomer.SETRANGE("Customer No.","No.");
               MyCustomer.DELETEALL;
               VATRegistrationLogMgt.DeleteCustomerLog(Rec);

               DimMgt.DeleteDefaultDim(DATABASE::Customer,"No.");

               CalendarManagement.DeleteCustomizedBaseCalendarData(CustomizedCalendarChange."Source Type"::Customer,"No.");
             END;

    OnRename=VAR
               CustomerTemplate@1000 : Record 5105;
             BEGIN
               ApprovalsMgmt.OnRenameRecordInApprovalRequest(xRec.RECORDID,RECORDID);
               DimMgt.RenameDefaultDim(DATABASE::Customer,xRec."No.","No.");

               SetLastModifiedDateTime;
               IF xRec."Invoice Disc. Code" = xRec."No." THEN
                 "Invoice Disc. Code" := "No.";
               CustomerTemplate.SETRANGE("Invoice Disc. Code",xRec."No.");
               CustomerTemplate.MODIFYALL("Invoice Disc. Code","No.");

               CalendarManagement.RenameCustomizedBaseCalendarData(CustomizedCalendarChange."Source Type"::Customer,"No.",xRec."No.");
             END;

    CaptionML=[ENU=Customer;
               ENG=Customer];
    LookupPageID=Page33;
    DrillDownPageID=Page22;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  NoSeriesMgt.TestManual(SalesSetup."Customer Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                                IF "Invoice Disc. Code" = '' THEN
                                                                  "Invoice Disc. Code" := "No.";
                                                              END;

                                                   AltSearchField=Search Name;
                                                   CaptionML=[ENU=No.;
                                                              ENG=No.] }
    { 2   ;   ;Name                ;Text100       ;OnValidate=BEGIN
                                                                IF ("Search Name" = UPPERCASE(xRec.Name)) OR ("Search Name" = '') THEN
                                                                  "Search Name" := Name;
                                                              END;

                                                   CaptionML=[ENU=Name;
                                                              ENG=Name] }
    { 3   ;   ;Search Name         ;Code100       ;CaptionML=[ENU=Search Name;
                                                              ENG=Search Name] }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=[ENU=Name 2;
                                                              ENG=Name 2] }
    { 5   ;   ;Address             ;Text100       ;CaptionML=[ENU=Address;
                                                              ENG=Address] }
    { 6   ;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              ENG=Address 2] }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);

                                                                OnAfterValidateCity(Rec,xRec);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode(City,"Post Code",County,"Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              ENG=City] }
    { 8   ;   ;Contact             ;Text100       ;OnValidate=BEGIN
                                                                IF RMSetup.GET THEN
                                                                  IF RMSetup."Bus. Rel. Code for Customers" <> '' THEN
                                                                    IF (xRec.Contact = '') AND (xRec."Primary Contact No." = '') AND (Contact <> '') THEN BEGIN
                                                                      MODIFY;
                                                                      UpdateContFromCust.OnModify(Rec);
                                                                      UpdateContFromCust.InsertNewContactPerson(Rec,FALSE);
                                                                      MODIFY(TRUE);
                                                                    END
                                                              END;

                                                   OnLookup=VAR
                                                              ContactBusinessRelation@1001 : Record 5054;
                                                              Cont@1000 : Record 5050;
                                                              TempCust@1002 : TEMPORARY Record 18;
                                                            BEGIN
                                                              IF ContactBusinessRelation.FindByRelation(ContactBusinessRelation."Link to Table"::Customer,"No.") THEN BEGIN
                                                                Cont.FILTERGROUP(2);
                                                                Cont.SETRANGE("Company No.",ContactBusinessRelation."Contact No.");
                                                              END ELSE
                                                                Cont.SETRANGE("Company No.",'');

                                                              IF "Primary Contact No." <> '' THEN
                                                                IF Cont.GET("Primary Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                TempCust.COPY(Rec);
                                                                FIND;
                                                                TRANSFERFIELDS(TempCust,FALSE);
                                                                VALIDATE("Primary Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Contact;
                                                              ENG=Contact] }
    { 9   ;   ;Phone No.           ;Text30        ;OnValidate=VAR
                                                                Char@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Char";
                                                                i@1001 : Integer;
                                                              BEGIN
                                                                FOR i := 1 TO STRLEN("Phone No.") DO
                                                                  IF Char.IsLetter("Phone No."[i]) THEN
                                                                    FIELDERROR("Phone No.",PhoneNoCannotContainLettersErr);
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              ENG=Phone No.] }
    { 10  ;   ;Telex No.           ;Text20        ;CaptionML=[ENU=Telex No.;
                                                              ENG=Telex No.] }
    { 11  ;   ;Document Sending Profile;Code20    ;TableRelation="Document Sending Profile".Code;
                                                   CaptionML=[ENU=Document Sending Profile;
                                                              ENG=Document Sending Profile] }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(No.));
                                                   CaptionML=[ENU=Ship-to Code;
                                                              ENG=Ship-to Code] }
    { 14  ;   ;Our Account No.     ;Text20        ;CaptionML=[ENU=Our Account No.;
                                                              ENG=Our Account No.] }
    { 15  ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=[ENU=Territory Code;
                                                              ENG=Territory Code] }
    { 16  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              ENG=Global Dimension 1 Code];
                                                   CaptionClass='1,1,1' }
    { 17  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              ENG=Global Dimension 2 Code];
                                                   CaptionClass='1,1,2' }
    { 18  ;   ;Chain Name          ;Code10        ;CaptionML=[ENU=Chain Name;
                                                              ENG=Chain Name] }
    { 19  ;   ;Budgeted Amount     ;Decimal       ;CaptionML=[ENU=Budgeted Amount;
                                                              ENG=Budgeted Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 20  ;   ;Credit Limit (LCY)  ;Decimal       ;CaptionML=[ENU=Credit Limit (LCY);
                                                              ENG=Credit Limit (LCY)];
                                                   AutoFormatType=1 }
    { 21  ;   ;Customer Posting Group;Code20      ;TableRelation="Customer Posting Group";
                                                   CaptionML=[ENU=Customer Posting Group;
                                                              ENG=Customer Posting Group] }
    { 22  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                UpdateCurrencyId;
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              ENG=Currency Code] }
    { 23  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=[ENU=Customer Price Group;
                                                              ENG=Customer Price Group] }
    { 24  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=[ENU=Language Code;
                                                              ENG=Language Code] }
    { 26  ;   ;Statistics Group    ;Integer       ;CaptionML=[ENU=Statistics Group;
                                                              ENG=Statistics Group] }
    { 27  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                UpdatePaymentTermsId;
                                                              END;

                                                   CaptionML=[ENU=Payment Terms Code;
                                                              ENG=Payment Terms Code] }
    { 28  ;   ;Fin. Charge Terms Code;Code10      ;TableRelation="Finance Charge Terms";
                                                   CaptionML=[ENU=Fin. Charge Terms Code;
                                                              ENG=Fin. Charge Terms Code] }
    { 29  ;   ;Salesperson Code    ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=BEGIN
                                                                ValidateSalesPersonCode;
                                                              END;

                                                   CaptionML=[ENU=Salesperson Code;
                                                              ENG=Salesperson Code] }
    { 30  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   OnValidate=BEGIN
                                                                UpdateShipmentMethodId;
                                                              END;

                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ENG=Shipment Method Code] }
    { 31  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ENG=Shipping Agent Code] }
    { 32  ;   ;Place of Export     ;Code20        ;CaptionML=[ENU=Place of Export;
                                                              ENG=Place of Export] }
    { 33  ;   ;Invoice Disc. Code  ;Code20        ;TableRelation=Customer;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Invoice Disc. Code;
                                                              ENG=Invoice Disc. Code] }
    { 34  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ENG=Customer Disc. Group] }
    { 35  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                PostCode.CheckClearPostCodeCityCounty(City,"Post Code",County,"Country/Region Code",xRec."Country/Region Code");

                                                                IF "Country/Region Code" <> xRec."Country/Region Code" THEN
                                                                  VATRegistrationValidation;
                                                              END;

                                                   CaptionML=[ENU=Country/Region Code;
                                                              ENG=Country/Region Code] }
    { 36  ;   ;Collection Method   ;Code20        ;CaptionML=[ENU=Collection Method;
                                                              ENG=Collection Method] }
    { 37  ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              ENG=Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 38  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Customer),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              ENG=Comment];
                                                   Editable=No }
    { 39  ;   ;Blocked             ;Option        ;OnValidate=BEGIN
                                                                IF (Blocked <> Blocked::All) AND "Privacy Blocked" THEN
                                                                  IF GUIALLOWED THEN
                                                                    IF CONFIRM(ConfirmBlockedPrivacyBlockedQst) THEN
                                                                      "Privacy Blocked" := FALSE
                                                                    ELSE
                                                                      ERROR('')
                                                                  ELSE
                                                                    ERROR(CanNotChangeBlockedDueToPrivacyBlockedErr);
                                                              END;

                                                   CaptionML=[ENU=Blocked;
                                                              ENG=Blocked];
                                                   OptionCaptionML=[ENU=" ,Ship,Invoice,All";
                                                                    ENG=" ,Ship,Invoice,All"];
                                                   OptionString=[ ,Ship,Invoice,All] }
    { 40  ;   ;Invoice Copies      ;Integer       ;CaptionML=[ENU=Invoice Copies;
                                                              ENG=Invoice Copies] }
    { 41  ;   ;Last Statement No.  ;Integer       ;CaptionML=[ENU=Last Statement No.;
                                                              ENG=Last Statement No.] }
    { 42  ;   ;Print Statements    ;Boolean       ;CaptionML=[ENU=Print Statements;
                                                              ENG=Print Statements] }
    { 45  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ENG=Bill-to Customer No.] }
    { 46  ;   ;Priority            ;Integer       ;CaptionML=[ENU=Priority;
                                                              ENG=Priority] }
    { 47  ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=VAR
                                                                PaymentMethod@1000 : Record 289;
                                                              BEGIN
                                                                UpdatePaymentMethodId;

                                                                IF "Payment Method Code" = '' THEN
                                                                  EXIT;

                                                                PaymentMethod.GET("Payment Method Code");
                                                                IF PaymentMethod."Direct Debit" AND ("Payment Terms Code" = '') THEN
                                                                  VALIDATE("Payment Terms Code",PaymentMethod."Direct Debit Pmt. Terms Code");
                                                              END;

                                                   CaptionML=[ENU=Payment Method Code;
                                                              ENG=Payment Method Code] }
    { 53  ;   ;Last Modified Date Time;DateTime   ;CaptionML=[ENU=Last Modified Date Time;
                                                              ENG=Last Modified Date Time];
                                                   Editable=No }
    { 54  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ENG=Last Date Modified];
                                                   Editable=No }
    { 55  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENG=Date Filter] }
    { 56  ;   ;Global Dimension 1 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Filter;
                                                              ENG=Global Dimension 1 Filter];
                                                   CaptionClass='1,3,1' }
    { 57  ;   ;Global Dimension 2 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Global Dimension 2 Filter;
                                                              ENG=Global Dimension 2 Filter];
                                                   CaptionClass='1,3,2' }
    { 58  ;   ;Balance             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Balance;
                                                              ENG=Balance];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 59  ;   ;Balance (LCY)       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Balance (LCY);
                                                              ENG=Balance (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 60  ;   ;Net Change          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Net Change;
                                                              ENG=Net Change];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Net Change (LCY)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Net Change (LCY);
                                                              ENG=Net Change (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 62  ;   ;Sales (LCY)         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cust. Ledger Entry"."Sales (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                             Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                             Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                             Posting Date=FIELD(Date Filter),
                                                                                                             Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Sales (LCY);
                                                              ENG=Sales (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 63  ;   ;Profit (LCY)        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cust. Ledger Entry"."Profit (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                              Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                              Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Profit (LCY);
                                                              ENG=Profit (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 64  ;   ;Inv. Discounts (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cust. Ledger Entry"."Inv. Discount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                     Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                     Posting Date=FIELD(Date Filter),
                                                                                                                     Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Inv. Discounts (LCY);
                                                              ENG=Inv. Discounts (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 65  ;   ;Pmt. Discounts (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(Payment Discount..'Payment Discount (VAT Adjustment)'),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Pmt. Discounts (LCY);
                                                              ENG=Pmt. Discounts (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 66  ;   ;Balance Due         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Customer No.=FIELD(No.),
                                                                                                              Initial Entry Due Date=FIELD(UPPERLIMIT(Date Filter)),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Balance Due;
                                                              ENG=Balance Due];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 67  ;   ;Balance Due (LCY)   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Due Date=FIELD(UPPERLIMIT(Date Filter)),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Balance Due (LCY);
                                                              ENG=Balance Due (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 69  ;   ;Payments            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Payment),
                                                                                                               Entry Type=CONST(Initial Entry),
                                                                                                               Customer No.=FIELD(No.),
                                                                                                               Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                               Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                               Posting Date=FIELD(Date Filter),
                                                                                                               Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Payments;
                                                              ENG=Payments];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 70  ;   ;Invoice Amounts     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Invoice),
                                                                                                              Entry Type=CONST(Initial Entry),
                                                                                                              Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Invoice Amounts;
                                                              ENG=Invoice Amounts];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 71  ;   ;Cr. Memo Amounts    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Credit Memo),
                                                                                                               Entry Type=CONST(Initial Entry),
                                                                                                               Customer No.=FIELD(No.),
                                                                                                               Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                               Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                               Posting Date=FIELD(Date Filter),
                                                                                                               Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Cr. Memo Amounts;
                                                              ENG=Cr. Memo Amounts];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 72  ;   ;Finance Charge Memo Amounts;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Finance Charge Memo),
                                                                                                              Entry Type=CONST(Initial Entry),
                                                                                                              Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Finance Charge Memo Amounts;
                                                              ENG=Finance Charge Memo Amounts];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 74  ;   ;Payments (LCY)      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Payment),
                                                                                                                       Entry Type=CONST(Initial Entry),
                                                                                                                       Customer No.=FIELD(No.),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Payments (LCY);
                                                              ENG=Payments (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 75  ;   ;Inv. Amounts (LCY)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Invoice),
                                                                                                                      Entry Type=CONST(Initial Entry),
                                                                                                                      Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Inv. Amounts (LCY);
                                                              ENG=Inv. Amounts (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 76  ;   ;Cr. Memo Amounts (LCY);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Credit Memo),
                                                                                                                       Entry Type=CONST(Initial Entry),
                                                                                                                       Customer No.=FIELD(No.),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Cr. Memo Amounts (LCY);
                                                              ENG=Cr. Memo Amounts (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 77  ;   ;Fin. Charge Memo Amounts (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Finance Charge Memo),
                                                                                                                      Entry Type=CONST(Initial Entry),
                                                                                                                      Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Fin. Charge Memo Amounts (LCY);
                                                              ENG=Fin. Charge Memo Amounts (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 78  ;   ;Outstanding Orders  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount" WHERE (Document Type=CONST(Order),
                                                                                                            Bill-to Customer No.=FIELD(No.),
                                                                                                            Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                            Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                            Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Outstanding Orders;
                                                              ENG=Outstanding Orders];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 79  ;   ;Shipped Not Invoiced;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Shipped Not Invoiced" WHERE (Document Type=CONST(Order),
                                                                                                              Bill-to Customer No.=FIELD(No.),
                                                                                                              Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                              Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Shipped Not Invoiced;
                                                              ENG=Shipped Not Invoiced];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 80  ;   ;Application Method  ;Option        ;CaptionML=[ENU=Application Method;
                                                              ENG=Application Method];
                                                   OptionCaptionML=[ENU=Manual,Apply to Oldest;
                                                                    ENG=Manual,Apply to Oldest];
                                                   OptionString=Manual,Apply to Oldest }
    { 82  ;   ;Prices Including VAT;Boolean       ;CaptionML=[ENU=Prices Including VAT;
                                                              ENG=Prices Including VAT] }
    { 83  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ENG=Location Code] }
    { 84  ;   ;Fax No.             ;Text30        ;CaptionML=[ENU=Fax No.;
                                                              ENG=Fax No.] }
    { 85  ;   ;Telex Answer Back   ;Text20        ;CaptionML=[ENU=Telex Answer Back;
                                                              ENG=Telex Answer Back] }
    { 86  ;   ;VAT Registration No.;Text20        ;OnValidate=BEGIN
                                                                "VAT Registration No." := UPPERCASE("VAT Registration No.");
                                                                IF "VAT Registration No." <> xRec."VAT Registration No." THEN
                                                                  VATRegistrationValidation;
                                                              END;

                                                   CaptionML=[ENU=VAT Registration No.;
                                                              ENG=VAT Registration No.] }
    { 87  ;   ;Combine Shipments   ;Boolean       ;AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Combine Shipments;
                                                              ENG=Combine Shipments] }
    { 88  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENG=Gen. Bus. Posting Group] }
    { 89  ;   ;Picture             ;BLOB          ;ObsoleteState=Pending;
                                                   ObsoleteReason=Replaced by Image field;
                                                   CaptionML=[ENU=Picture;
                                                              ENG=Picture];
                                                   SubType=Bitmap }
    { 90  ;   ;GLN                 ;Code13        ;OnValidate=VAR
                                                                GLNCalculator@1000 : Codeunit 1607;
                                                              BEGIN
                                                                IF GLN <> '' THEN
                                                                  GLNCalculator.AssertValidCheckDigit13(GLN);
                                                              END;

                                                   CaptionML=[ENU=GLN;
                                                              ENG=GLN];
                                                   Numeric=Yes }
    { 91  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);

                                                                OnAfterValidatePostCode(Rec,xRec);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode(City,"Post Code",County,"Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              ENG=Postcode] }
    { 92  ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              ENG=County];
                                                   CaptionClass='5,1,' + "Country/Region Code" }
    { 95  ;   ;Use GLN in Electronic Document;Boolean;
                                                   CaptionML=[ENU=Use GLN in Electronic Documents;
                                                              ENG=Use GLN in Electronic Documents] }
    { 97  ;   ;Debit Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Debit Amount" WHERE (Customer No.=FIELD(No.),
                                                                                                                      Entry Type=FILTER(<>Application),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Debit Amount;
                                                              ENG=Debit Amount];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 98  ;   ;Credit Amount       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Credit Amount" WHERE (Customer No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(<>Application),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Credit Amount;
                                                              ENG=Credit Amount];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 99  ;   ;Debit Amount (LCY)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Debit Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                            Entry Type=FILTER(<>Application),
                                                                                                                            Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                            Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                            Posting Date=FIELD(Date Filter),
                                                                                                                            Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Debit Amount (LCY);
                                                              ENG=Debit Amount (LCY)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 100 ;   ;Credit Amount (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Credit Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                             Entry Type=FILTER(<>Application),
                                                                                                                             Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                             Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                             Posting Date=FIELD(Date Filter),
                                                                                                                             Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Credit Amount (LCY);
                                                              ENG=Credit Amount (LCY)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 102 ;   ;E-Mail              ;Text80        ;OnValidate=VAR
                                                                MailManagement@1000 : Codeunit 9520;
                                                              BEGIN
                                                                IF "E-Mail" = '' THEN
                                                                  EXIT;
                                                                MailManagement.CheckValidEmailAddresses("E-Mail");
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=Email;
                                                              ENG=Email] }
    { 103 ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=[ENU=Home Page;
                                                              ENG=Home Page] }
    { 104 ;   ;Reminder Terms Code ;Code10        ;TableRelation="Reminder Terms";
                                                   CaptionML=[ENU=Reminder Terms Code;
                                                              ENG=Reminder Terms Code] }
    { 105 ;   ;Reminder Amounts    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Reminder),
                                                                                                              Entry Type=CONST(Initial Entry),
                                                                                                              Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Reminder Amounts;
                                                              ENG=Reminder Amounts];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 106 ;   ;Reminder Amounts (LCY);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Reminder),
                                                                                                                      Entry Type=CONST(Initial Entry),
                                                                                                                      Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Reminder Amounts (LCY);
                                                              ENG=Reminder Amounts (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 107 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENG=No. Series];
                                                   Editable=No }
    { 108 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateTaxAreaId;
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENG=VAT Area Code] }
    { 109 ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENG=VAT Liable] }
    { 110 ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                UpdateTaxAreaId;
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENG=VAT Bus. Posting Group] }
    { 111 ;   ;Currency Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Filter;
                                                              ENG=Currency Filter] }
    { 113 ;   ;Outstanding Orders (LCY);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                  Bill-to Customer No.=FIELD(No.),
                                                                                                                  Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                  Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                  Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Outstanding Orders (LCY);
                                                              ENG=Outstanding Orders (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 114 ;   ;Shipped Not Invoiced (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Shipped Not Invoiced (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                    Bill-to Customer No.=FIELD(No.),
                                                                                                                    Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                    Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                    Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Shipped Not Invoiced (LCY);
                                                              ENG=Shipped Not Invoiced (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 115 ;   ;Reserve             ;Option        ;InitValue=Optional;
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Reserve;
                                                              ENG=Reserve];
                                                   OptionCaptionML=[ENU=Never,Optional,Always;
                                                                    ENG=Never,Optional,Always];
                                                   OptionString=Never,Optional,Always }
    { 116 ;   ;Block Payment Tolerance;Boolean    ;OnValidate=BEGIN
                                                                UpdatePaymentTolerance((CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   CaptionML=[ENU=Block Payment Tolerance;
                                                              ENG=Block Payment Tolerance] }
    { 117 ;   ;Pmt. Disc. Tolerance (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(Payment Discount Tolerance|'Payment Discount Tolerance (VAT Adjustment)'|'Payment Discount Tolerance (VAT Excl.)'),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Pmt. Disc. Tolerance (LCY);
                                                              ENG=Pmt. Disc. Tolerance (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 118 ;   ;Pmt. Tolerance (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(Payment Tolerance|'Payment Tolerance (VAT Adjustment)'|'Payment Tolerance (VAT Excl.)'),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Pmt. Tolerance (LCY);
                                                              ENG=Pmt. Tolerance (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 119 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   OnValidate=VAR
                                                                CustLedgEntry@1001 : Record 21;
                                                                AccountingPeriod@1000 : Record 50;
                                                                ICPartner@1002 : Record 413;
                                                                ConfirmManagement@1003 : Codeunit 27;
                                                              BEGIN
                                                                IF xRec."IC Partner Code" <> "IC Partner Code" THEN BEGIN
                                                                  IF NOT CustLedgEntry.SETCURRENTKEY("Customer No.",Open) THEN
                                                                    CustLedgEntry.SETCURRENTKEY("Customer No.");
                                                                  CustLedgEntry.SETRANGE("Customer No.","No.");
                                                                  CustLedgEntry.SETRANGE(Open,TRUE);
                                                                  IF CustLedgEntry.FINDLAST THEN
                                                                    ERROR(Text012,FIELDCAPTION("IC Partner Code"),TABLECAPTION);

                                                                  CustLedgEntry.RESET;
                                                                  CustLedgEntry.SETCURRENTKEY("Customer No.","Posting Date");
                                                                  CustLedgEntry.SETRANGE("Customer No.","No.");
                                                                  AccountingPeriod.SETRANGE(Closed,FALSE);
                                                                  IF AccountingPeriod.FINDFIRST THEN BEGIN
                                                                    CustLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
                                                                    IF CustLedgEntry.FINDFIRST THEN
                                                                      IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text011,TABLECAPTION),TRUE) THEN
                                                                        "IC Partner Code" := xRec."IC Partner Code";
                                                                  END;
                                                                END;

                                                                IF "IC Partner Code" <> '' THEN BEGIN
                                                                  ICPartner.GET("IC Partner Code");
                                                                  IF (ICPartner."Customer No." <> '') AND (ICPartner."Customer No." <> "No.") THEN
                                                                    ERROR(Text010,FIELDCAPTION("IC Partner Code"),"IC Partner Code",TABLECAPTION,ICPartner."Customer No.");
                                                                  ICPartner."Customer No." := "No.";
                                                                  ICPartner.MODIFY;
                                                                END;

                                                                IF (xRec."IC Partner Code" <> "IC Partner Code") AND ICPartner.GET(xRec."IC Partner Code") THEN BEGIN
                                                                  ICPartner."Customer No." := '';
                                                                  ICPartner.MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=IC Partner Code;
                                                              ENG=IC Partner Code] }
    { 120 ;   ;Refunds             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Refund),
                                                                                                              Entry Type=CONST(Initial Entry),
                                                                                                              Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Refunds;
                                                              ENG=Refunds] }
    { 121 ;   ;Refunds (LCY)       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Refund),
                                                                                                                      Entry Type=CONST(Initial Entry),
                                                                                                                      Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Refunds (LCY);
                                                              ENG=Refunds (LCY)] }
    { 122 ;   ;Other Amounts       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(" "),
                                                                                                              Entry Type=CONST(Initial Entry),
                                                                                                              Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Other Amounts;
                                                              ENG=Other Amounts] }
    { 123 ;   ;Other Amounts (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(" "),
                                                                                                                      Entry Type=CONST(Initial Entry),
                                                                                                                      Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Other Amounts (LCY);
                                                              ENG=Other Amounts (LCY)] }
    { 124 ;   ;Prepayment %        ;Decimal       ;CaptionML=[ENU=Prepayment %;
                                                              ENG=Prepayment %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 125 ;   ;Outstanding Invoices (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Invoice),
                                                                                                                  Bill-to Customer No.=FIELD(No.),
                                                                                                                  Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                  Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                  Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Outstanding Invoices (LCY);
                                                              ENG=Outstanding Invoices (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 126 ;   ;Outstanding Invoices;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount" WHERE (Document Type=CONST(Invoice),
                                                                                                            Bill-to Customer No.=FIELD(No.),
                                                                                                            Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                            Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                            Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Outstanding Invoices;
                                                              ENG=Outstanding Invoices];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 130 ;   ;Bill-to No. Of Archived Doc.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header Archive" WHERE (Document Type=CONST(Order),
                                                                                                   Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=Bill-to No. Of Archived Doc.;
                                                              ENG=Bill-to No. Of Archived Doc.] }
    { 131 ;   ;Sell-to No. Of Archived Doc.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header Archive" WHERE (Document Type=CONST(Order),
                                                                                                   Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=Sell-to No. Of Archived Doc.;
                                                              ENG=Sell-to No. Of Archived Doc.] }
    { 132 ;   ;Partner Type        ;Option        ;CaptionML=[ENU=Partner Type;
                                                              ENG=Partner Type];
                                                   OptionCaptionML=[ENU=" ,Company,Person";
                                                                    ENG=" ,Company,Person"];
                                                   OptionString=[ ,Company,Person] }
    { 140 ;   ;Image               ;Media         ;ExtendedDatatype=Person;
                                                   CaptionML=[ENU=Image;
                                                              ENG=Image] }
    { 150 ;   ;Privacy Blocked     ;Boolean       ;OnValidate=BEGIN
                                                                IF "Privacy Blocked" THEN
                                                                  Blocked := Blocked::All
                                                                ELSE
                                                                  Blocked := Blocked::" ";
                                                              END;

                                                   CaptionML=[ENU=Privacy Blocked;
                                                              ENG=Privacy Blocked] }
    { 160 ;   ;Disable Search by Name;Boolean     ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Disable Search by Name;
                                                              ENG=Disable Search by Name] }
    { 288 ;   ;Preferred Bank Account Code;Code20 ;TableRelation="Customer Bank Account".Code WHERE (Customer No.=FIELD(No.));
                                                   CaptionML=[ENU=Preferred Bank Account Code;
                                                              ENG=Preferred Bank Account Code] }
    { 840 ;   ;Cash Flow Payment Terms Code;Code10;TableRelation="Payment Terms";
                                                   CaptionML=[ENU=Cash Flow Payment Terms Code;
                                                              ENG=Cash Flow Payment Terms Code] }
    { 5049;   ;Primary Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                Cont@1000 : Record 5050;
                                                                ContBusRel@1001 : Record 5054;
                                                              BEGIN
                                                                Contact := '';
                                                                IF "Primary Contact No." <> '' THEN BEGIN
                                                                  Cont.GET("Primary Contact No.");

                                                                  ContBusRel.FindOrRestoreContactBusinessRelation(Cont,Rec,ContBusRel."Link to Table"::Customer);

                                                                  IF Cont."Company No." <> ContBusRel."Contact No." THEN
                                                                    ERROR(Text003,Cont."No.",Cont.Name,"No.",Name);

                                                                  IF Cont.Type = Cont.Type::Person THEN
                                                                    Contact := Cont.Name;

                                                                  IF Cont.Image.HASVALUE THEN
                                                                    CopyContactPicture(Cont);

                                                                  IF Cont."Phone No." <> '' THEN
                                                                    "Phone No." := Cont."Phone No.";
                                                                  IF Cont."E-Mail" <> '' THEN
                                                                    "E-Mail" := Cont."E-Mail";
                                                                END ELSE
                                                                  IF Image.HASVALUE THEN
                                                                    CLEAR(Image);
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1000 : Record 5050;
                                                              ContBusRel@1001 : Record 5054;
                                                              TempCust@1002 : TEMPORARY Record 18;
                                                            BEGIN
                                                              ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                              ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
                                                              ContBusRel.SETRANGE("No.","No.");
                                                              IF ContBusRel.FINDFIRST THEN BEGIN
                                                                Cont.FILTERGROUP(2);
                                                                Cont.SETRANGE("Company No.",ContBusRel."Contact No.");
                                                              END ELSE
                                                                Cont.SETRANGE("No.",'');

                                                              IF "Primary Contact No." <> '' THEN
                                                                IF Cont.GET("Primary Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                TempCust.COPY(Rec);
                                                                FIND;
                                                                TRANSFERFIELDS(TempCust,FALSE);
                                                                VALIDATE("Primary Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Primary Contact No.;
                                                              ENG=Primary Contact No.] }
    { 5050;   ;Contact Type        ;Option        ;OnValidate=VAR
                                                                SalesHeader@1000 : Record 36;
                                                              BEGIN
                                                                IF IdentityManagement.IsInvAppId THEN BEGIN
                                                                  VALIDATE("Prices Including VAT","Contact Type" = "Contact Type"::Person);
                                                                  SalesHeader.SETRANGE("Sell-to Customer No.","No.");
                                                                  IF SalesHeader.FINDSET THEN
                                                                    REPEAT
                                                                      SalesHeader.VALIDATE("Prices Including VAT","Prices Including VAT");
                                                                      SalesHeader.MODIFY(TRUE);
                                                                    UNTIL SalesHeader.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Contact Type;
                                                              ENG=Contact Type];
                                                   OptionCaptionML=[ENU=Company,Person;
                                                                    ENG=Company,Person];
                                                   OptionString=Company,Person }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENG=Responsibility Centre] }
    { 5750;   ;Shipping Advice     ;Option        ;AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Shipping Advice;
                                                              ENG=Shipping Advice];
                                                   OptionCaptionML=[ENU=Partial,Complete;
                                                                    ENG=Partial,Complete];
                                                   OptionString=Partial,Complete }
    { 5790;   ;Shipping Time       ;DateFormula   ;AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Time;
                                                              ENG=Shipping Time] }
    { 5792;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=BEGIN
                                                                IF ("Shipping Agent Code" <> '') AND
                                                                   ("Shipping Agent Service Code" <> '')
                                                                THEN
                                                                  IF ShippingAgentService.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
                                                                    "Shipping Time" := ShippingAgentService."Shipping Time"
                                                                  ELSE
                                                                    EVALUATE("Shipping Time",'<>');
                                                              END;

                                                   CaptionML=[ENU=Shipping Agent Service Code;
                                                              ENG=Shipping Agent Service Code] }
    { 5900;   ;Service Zone Code   ;Code10        ;TableRelation="Service Zone";
                                                   CaptionML=[ENU=Service Zone Code;
                                                              ENG=Service Zone Code] }
    { 5902;   ;Contract Gain/Loss Amount;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Contract Gain/Loss Entry".Amount WHERE (Customer No.=FIELD(No.),
                                                                                                            Ship-to Code=FIELD(Ship-to Filter),
                                                                                                            Change Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Contract Gain/Loss Amount;
                                                              ENG=Contract Gain/Loss Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5903;   ;Ship-to Filter      ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(No.));
                                                   CaptionML=[ENU=Ship-to Filter;
                                                              ENG=Ship-to Filter] }
    { 5910;   ;Outstanding Serv. Orders (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                    Bill-to Customer No.=FIELD(No.),
                                                                                                                    Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                    Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                    Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Outstanding Serv. Orders (LCY);
                                                              ENG=Outstanding Serv. Orders (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5911;   ;Serv Shipped Not Invoiced(LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Line"."Shipped Not Invoiced (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                      Bill-to Customer No.=FIELD(No.),
                                                                                                                      Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                      Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Serv Shipped Not Invoiced(LCY);
                                                              ENG=Serv Shipped Not Invoiced(LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5912;   ;Outstanding Serv.Invoices(LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Invoice),
                                                                                                                    Bill-to Customer No.=FIELD(No.),
                                                                                                                    Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                    Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                    Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Outstanding Serv.Invoices(LCY);
                                                              ENG=Outstanding Serv.Invoices(LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Line Disc.;
                                                              ENG=Allow Line Disc.] }
    { 7171;   ;No. of Quotes       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Quote),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Quotes;
                                                              ENG=No. of Quotes];
                                                   Editable=No }
    { 7172;   ;No. of Blanket Orders;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Blanket Order),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=No. of Blanket Orders;
                                                              ENG=No. of Blanket Orders];
                                                   Editable=No }
    { 7173;   ;No. of Orders       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Order),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=No. of Orders;
                                                              ENG=No. of Orders];
                                                   Editable=No }
    { 7174;   ;No. of Invoices     ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Invoice),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Invoices;
                                                              ENG=No. of Invoices];
                                                   Editable=No }
    { 7175;   ;No. of Return Orders;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Return Order),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   AccessByPermission=TableData 6660=R;
                                                   CaptionML=[ENU=No. of Return Orders;
                                                              ENG=No. of Return Orders];
                                                   Editable=No }
    { 7176;   ;No. of Credit Memos ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Credit Memo),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Credit Memos;
                                                              ENG=No. of Credit Memos];
                                                   Editable=No }
    { 7177;   ;No. of Pstd. Shipments;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Shipment Header" WHERE (Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Pstd. Shipments;
                                                              ENG=No. of Pstd. Shipments];
                                                   Editable=No }
    { 7178;   ;No. of Pstd. Invoices;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Invoice Header" WHERE (Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Pstd. Invoices;
                                                              ENG=No. of Pstd. Invoices];
                                                   Editable=No }
    { 7179;   ;No. of Pstd. Return Receipts;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Return Receipt Header" WHERE (Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Pstd. Return Receipts;
                                                              ENG=No. of Pstd. Return Receipts];
                                                   Editable=No }
    { 7180;   ;No. of Pstd. Credit Memos;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Cr.Memo Header" WHERE (Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Pstd. Credit Memos;
                                                              ENG=No. of Pstd. Credit Memos];
                                                   Editable=No }
    { 7181;   ;No. of Ship-to Addresses;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Count("Ship-to Address" WHERE (Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Ship-to Addresses;
                                                              ENG=No. of Ship-to Addresses];
                                                   Editable=No }
    { 7182;   ;Bill-To No. of Quotes;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Quote),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=Bill-To No. of Quotes;
                                                              ENG=Bill-To No. of Quotes];
                                                   Editable=No }
    { 7183;   ;Bill-To No. of Blanket Orders;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Blanket Order),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Bill-To No. of Blanket Orders;
                                                              ENG=Bill-To No. of Blanket Orders];
                                                   Editable=No }
    { 7184;   ;Bill-To No. of Orders;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Order),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Bill-To No. of Orders;
                                                              ENG=Bill-To No. of Orders];
                                                   Editable=No }
    { 7185;   ;Bill-To No. of Invoices;Integer    ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Invoice),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=Bill-To No. of Invoices;
                                                              ENG=Bill-To No. of Invoices];
                                                   Editable=No }
    { 7186;   ;Bill-To No. of Return Orders;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Return Order),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   AccessByPermission=TableData 6660=R;
                                                   CaptionML=[ENU=Bill-To No. of Return Orders;
                                                              ENG=Bill-To No. of Return Orders];
                                                   Editable=No }
    { 7187;   ;Bill-To No. of Credit Memos;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Credit Memo),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=Bill-To No. of Credit Memos;
                                                              ENG=Bill-To No. of Credit Memos];
                                                   Editable=No }
    { 7188;   ;Bill-To No. of Pstd. Shipments;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Shipment Header" WHERE (Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=Bill-To No. of Pstd. Shipments;
                                                              ENG=Bill-To No. of Pstd. Shipments];
                                                   Editable=No }
    { 7189;   ;Bill-To No. of Pstd. Invoices;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Invoice Header" WHERE (Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=Bill-To No. of Pstd. Invoices;
                                                              ENG=Bill-To No. of Pstd. Invoices];
                                                   Editable=No }
    { 7190;   ;Bill-To No. of Pstd. Return R.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Return Receipt Header" WHERE (Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=Bill-To No. of Pstd. Return R.;
                                                              ENG=Bill-To No. of Pstd. Return R.];
                                                   Editable=No }
    { 7191;   ;Bill-To No. of Pstd. Cr. Memos;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Cr.Memo Header" WHERE (Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=Bill-To No. of Pstd. Cr. Memos;
                                                              ENG=Bill-To No. of Pstd. Cr. Memos];
                                                   Editable=No }
    { 7600;   ;Base Calendar Code  ;Code10        ;TableRelation="Base Calendar";
                                                   CaptionML=[ENU=Base Calendar Code;
                                                              ENG=Base Calendar Code] }
    { 7601;   ;Copy Sell-to Addr. to Qte From;Option;
                                                   AccessByPermission=TableData 5050=R;
                                                   CaptionML=[ENU=Copy Sell-to Addr. to Qte From;
                                                              ENG=Copy Sell-to Addr. to Qte From];
                                                   OptionCaptionML=[ENU=Company,Person;
                                                                    ENG=Company,Person];
                                                   OptionString=Company,Person }
    { 7602;   ;Validate EU Vat Reg. No.;Boolean   ;CaptionML=[ENU=Validate EU Vat Reg. No.;
                                                              ENG=Validate EU Vat Reg. No.] }
    { 8000;   ;Id                  ;GUID          ;CaptionML=[ENU=Id;
                                                              ENG=Id] }
    { 8001;   ;Currency Id         ;GUID          ;TableRelation=Currency.Id;
                                                   OnValidate=BEGIN
                                                                UpdateCurrencyCode;
                                                              END;

                                                   CaptionML=[ENU=Currency Id;
                                                              ENG=Currency Id] }
    { 8002;   ;Payment Terms Id    ;GUID          ;TableRelation="Payment Terms".Id;
                                                   OnValidate=BEGIN
                                                                UpdatePaymentTermsCode;
                                                              END;

                                                   CaptionML=[ENU=Payment Terms Id;
                                                              ENG=Payment Terms Id] }
    { 8003;   ;Shipment Method Id  ;GUID          ;TableRelation="Shipment Method".Id;
                                                   OnValidate=BEGIN
                                                                UpdateShipmentMethodCode;
                                                              END;

                                                   CaptionML=[ENU=Shipment Method Id;
                                                              ENG=Shipment Method Id] }
    { 8004;   ;Payment Method Id   ;GUID          ;TableRelation="Payment Method".Id;
                                                   OnValidate=BEGIN
                                                                UpdatePaymentMethodCode;
                                                              END;

                                                   CaptionML=[ENU=Payment Method Id;
                                                              ENG=Payment Method Id] }
    { 9003;   ;Tax Area ID         ;GUID          ;OnValidate=BEGIN
                                                                UpdateTaxAreaCode;
                                                              END;

                                                   CaptionML=[ENU=Tax Area ID;
                                                              ENG=Tax Area ID] }
    { 9004;   ;Tax Area Display Name;Text100      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Tax Area".Description WHERE (Code=FIELD(Tax Area Code)));
                                                   ObsoleteState=Removed;
                                                   ObsoleteReason=This field is not needed and it should not be used.;
                                                   CaptionML=[ENU=Tax Area Display Name;
                                                              ENG=Tax Area Display Name] }
    { 9005;   ;Contact ID          ;GUID          ;CaptionML=[ENU=Contact ID;
                                                              ENG=Contact ID] }
    { 9006;   ;Contact Graph Id    ;Text250       ;CaptionML=[ENU=Contact Graph Id;
                                                              ENG=Contact Graph Id] }
    { 10500;  ;Type of Supply Code ;Code10        ;TableRelation="Type of Supply";
                                                   ObsoleteState=Removed;
                                                   ObsoleteReason=Removed based on feedback.;
                                                   CaptionML=[ENU=Type of Supply Code;
                                                              ENG=Type of Supply Code] }
    { 50000;  ;Shop                ;Code20        ;DataClassification=ToBeClassified }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Customer Posting Group                   }
    {    ;Currency Code                            }
    {    ;Country/Region Code                      }
    {    ;Gen. Bus. Posting Group                  }
    {    ;Name,Address,City                        }
    {    ;VAT Registration No.                     }
    {    ;Name                                     }
    {    ;City                                     }
    {    ;Post Code                                }
    {    ;Phone No.                                }
    {    ;Contact                                  }
    {    ;Blocked                                  }
    {    ;Primary Contact No.                      }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Name,City,Post Code,Phone No.,Contact }
    { 2   ;Brick               ;No.,Name,Balance (LCY),Contact,Balance Due (LCY),Image }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one outstanding Sales %3 for this customer.;ENG=You cannot delete %1 %2 because there is at least one outstanding Sales %3 for this customer.';
      Text002@1001 : TextConst 'ENU=Do you wish to create a contact for %1 %2?;ENG=Do you wish to create a contact for %1 %2?';
      SalesSetup@1002 : Record 311;
      CommentLine@1004 : Record 97;
      SalesOrderLine@1005 : Record 37;
      CustBankAcc@1006 : Record 287;
      ShipToAddr@1007 : Record 222;
      PostCode@1008 : Record 225;
      GenBusPostingGrp@1009 : Record 250;
      ShippingAgentService@1010 : Record 5790;
      ItemCrossReference@1016 : Record 5717;
      RMSetup@1018 : Record 5079;
      SalesPrice@1021 : Record 7002;
      SalesLineDisc@1022 : Record 7004;
      SalesPrepmtPct@1003 : Record 459;
      ServContract@1026 : Record 5965;
      ServiceItem@1027 : Record 5940;
      SalespersonPurchaser@1060 : Record 13;
      CustomizedCalendarChange@1048 : Record 7602;
      PaymentToleranceMgt@1038 : Codeunit 426;
      IdentityManagement@1047 : Codeunit 9801;
      NoSeriesMgt@1011 : Codeunit 396;
      MoveEntries@1012 : Codeunit 361;
      UpdateContFromCust@1013 : Codeunit 5056;
      DimMgt@1014 : Codeunit 408;
      ApprovalsMgmt@1039 : Codeunit 1535;
      CalendarManagement@1049 : Codeunit 7600;
      InsertFromContact@1015 : Boolean;
      Text003@1020 : TextConst 'ENU=Contact %1 %2 is not related to customer %3 %4.;ENG=Contact %1 %2 is not related to customer %3 %4.';
      Text004@1023 : TextConst 'ENU=post;ENG=post';
      Text005@1024 : TextConst 'ENU=create;ENG=create';
      Text006@1025 : TextConst 'ENU=You cannot %1 this type of document when Customer %2 is blocked with type %3;ENG=You cannot %1 this type of document when Customer %2 is blocked with type %3';
      Text007@1028 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one not cancelled Service Contract for this customer.;ENG=You cannot delete %1 %2 because there is at least one not cancelled Service Contract for this customer.';
      Text008@1029 : TextConst 'ENU=Deleting the %1 %2 will cause the %3 to be deleted for the associated Service Items. Do you want to continue?;ENG=Deleting the %1 %2 will cause the %3 to be deleted for the associated Service Items. Do you want to continue?';
      Text009@1030 : TextConst 'ENU=Cannot delete customer.;ENG=Cannot delete customer.';
      Text010@1031 : TextConst 'ENU=The %1 %2 has been assigned to %3 %4.\The same %1 cannot be entered on more than one %3. Enter another code.;ENG=The %1 %2 has been assigned to %3 %4.\The same %1 cannot be entered on more than one %3. Enter another code.';
      Text011@1033 : TextConst 'ENU=Reconciling IC transactions may be difficult if you change IC Partner Code because this %1 has ledger entries in a fiscal year that has not yet been closed.\ Do you still want to change the IC Partner Code?;ENG=Reconciling IC transactions may be difficult if you change IC Partner Code because this %1 has ledger entries in a fiscal year that has not yet been closed.\ Do you still want to change the IC Partner Code?';
      Text012@1032 : TextConst 'ENU=You cannot change the contents of the %1 field because this %2 has one or more open ledger entries.;ENG=You cannot change the contents of the %1 field because this %2 has one or more open ledger entries.';
      Text013@1035 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one outstanding Service %3 for this customer.;ENG=You cannot delete %1 %2 because there is at least one outstanding Service %3 for this customer.';
      Text014@1017 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.;ENG=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      Text015@1036 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one %3 associated to this customer.;ENG=You cannot delete %1 %2 because there is at least one %3 associated to this customer.';
      AllowPaymentToleranceQst@1037 : TextConst 'ENU=Do you want to allow payment tolerance for entries that are currently open?;ENG=Do you want to allow payment tolerance for entries that are currently open?';
      RemovePaymentRoleranceQst@1019 : TextConst 'ENU=Do you want to remove payment tolerance from entries that are currently open?;ENG=Do you want to remove payment tolerance from entries that are currently open?';
      CreateNewCustTxt@1041 : TextConst '@@@="%1 is the name to be used to create the customer. ";ENU=Create a new customer card for %1;ENG=Create a new customer card for %1';
      SelectCustErr@1040 : TextConst 'ENU=You must select an existing customer.;ENG=You must select an existing customer.';
      CustNotRegisteredTxt@1042 : TextConst 'ENU=This customer is not registered. To continue, choose one of the following options:;ENG=This customer is not registered. To continue, choose one of the following options:';
      SelectCustTxt@1043 : TextConst 'ENU=Select an existing customer;ENG=Select an existing customer';
      InsertFromTemplate@1044 : Boolean;
      LookupRequested@1034 : Boolean;
      OverrideImageQst@1045 : TextConst 'ENU=Override Image?;ENG=Override Image?';
      PrivacyBlockedActionErr@1061 : TextConst '@@@="%1 = action (create or post), %2 = customer code.";ENU=You cannot %1 this type of document when Customer %2 is blocked for privacy.;ENG=You cannot %1 this type of document when Customer %2 is blocked for privacy.';
      PrivacyBlockedGenericTxt@1062 : TextConst '@@@="%1 = customer code";ENU=Privacy Blocked must not be true for customer %1.;ENG=Privacy Blocked must not be true for customer %1.';
      ConfirmBlockedPrivacyBlockedQst@1071 : TextConst 'ENU=If you change the Blocked field, the Privacy Blocked field is changed to No. Do you want to continue?;ENG=If you change the Blocked field, the Privacy Blocked field is changed to No. Do you want to continue?';
      CanNotChangeBlockedDueToPrivacyBlockedErr@1072 : TextConst 'ENU=The Blocked field cannot be changed because the user is blocked for privacy reasons.;ENG=The Blocked field cannot be changed because the user is blocked for privacy reasons.';
      PhoneNoCannotContainLettersErr@1046 : TextConst 'ENU=must not contain letters;ENG=must not contain letters';
      ForceUpdateContact@1050 : Boolean;

    [External]
    PROCEDURE AssistEdit@2(OldCust@1000 : Record 18) : Boolean;
    VAR
      Cust@1001 : Record 18;
    BEGIN
      WITH Cust DO BEGIN
        Cust := Rec;
        SalesSetup.GET;
        SalesSetup.TESTFIELD("Customer Nos.");
        IF NoSeriesMgt.SelectSeries(SalesSetup."Customer Nos.",OldCust."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := Cust;
          EXIT(TRUE);
        END;
      END;
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      IsHandled@1002 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeValidateShortcutDimCode(Rec,FieldNumber,ShortcutDimCode,IsHandled);
      IF IsHandled THEN
        EXIT;

      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      IF NOT ISTEMPORARY THEN BEGIN
        DimMgt.SaveDefaultDim(DATABASE::Customer,"No.",FieldNumber,ShortcutDimCode);
        MODIFY;
      END;
    END;

    [External]
    PROCEDURE ShowContact@1();
    VAR
      ContBusRel@1000 : Record 5054;
      Cont@1001 : Record 5050;
      OfficeContact@1002 : Record 5050;
      OfficeMgt@1003 : Codeunit 1630;
      ConfirmManagement@1004 : Codeunit 27;
    BEGIN
      IF OfficeMgt.GetContact(OfficeContact,"No.") AND (OfficeContact.COUNT = 1) THEN
        PAGE.RUN(PAGE::"Contact Card",OfficeContact)
      ELSE BEGIN
        IF "No." = '' THEN
          EXIT;

        ContBusRel.SETCURRENTKEY("Link to Table","No.");
        ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
        ContBusRel.SETRANGE("No.","No.");
        IF NOT ContBusRel.FINDFIRST THEN BEGIN
          IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text002,TABLECAPTION,"No."),TRUE) THEN
            EXIT;
          UpdateContFromCust.InsertNewContact(Rec,FALSE);
          ContBusRel.FINDFIRST;
        END;
        COMMIT;

        Cont.FILTERGROUP(2);
        Cont.SETRANGE("Company No.",ContBusRel."Contact No.");
        IF Cont.ISEMPTY THEN BEGIN
          Cont.SETRANGE("Company No.");
          Cont.SETRANGE("No.",ContBusRel."Contact No.");
        END;
        PAGE.RUN(PAGE::"Contact List",Cont);
      END;
    END;

    [External]
    PROCEDURE SetInsertFromContact@3(FromContact@1000 : Boolean);
    BEGIN
      InsertFromContact := FromContact;
    END;

    [External]
    PROCEDURE CheckBlockedCustOnDocs@5(Cust2@1000 : Record 18;DocType@1001 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';Shipment@1005 : Boolean;Transaction@1003 : Boolean);
    VAR
      Source@1002 : 'Journal,Document';
    BEGIN
      IF IsOnBeforeCheckBlockedCustHandled(Cust2,Source::Document,DocType,Shipment,Transaction) THEN
        EXIT;

      WITH Cust2 DO BEGIN
        IF "Privacy Blocked" THEN
          CustPrivacyBlockedErrorMessage(Cust2,Transaction);

        IF ((Blocked = Blocked::All) OR
            ((Blocked = Blocked::Invoice) AND
             (DocType IN [DocType::Quote,DocType::Order,DocType::Invoice,DocType::"Blanket Order"])) OR
            ((Blocked = Blocked::Ship) AND (DocType IN [DocType::Quote,DocType::Order,DocType::"Blanket Order"]) AND
             (NOT Transaction)) OR
            ((Blocked = Blocked::Ship) AND (DocType IN [DocType::Quote,DocType::Order,DocType::Invoice,DocType::"Blanket Order"]) AND
             Shipment AND Transaction))
        THEN
          CustBlockedErrorMessage(Cust2,Transaction);
      END;
    END;

    [External]
    PROCEDURE CheckBlockedCustOnJnls@7(Cust2@1003 : Record 18;DocType@1002 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';Transaction@1000 : Boolean);
    VAR
      Source@1001 : 'Journal,Document';
    BEGIN
      IF IsOnBeforeCheckBlockedCustHandled(Cust2,Source::Journal,DocType,FALSE,Transaction) THEN
        EXIT;

      WITH Cust2 DO BEGIN
        IF "Privacy Blocked" THEN
          CustPrivacyBlockedErrorMessage(Cust2,Transaction);

        IF (Blocked = Blocked::All) OR
           ((Blocked = Blocked::Invoice) AND (DocType IN [DocType::Invoice,DocType::" "]))
        THEN
          CustBlockedErrorMessage(Cust2,Transaction)
      END;
    END;

    [External]
    PROCEDURE CustBlockedErrorMessage@4(Cust2@1001 : Record 18;Transaction@1000 : Boolean);
    VAR
      Action@1002 : Text[30];
    BEGIN
      IF Transaction THEN
        Action := Text004
      ELSE
        Action := Text005;
      ERROR(Text006,Action,Cust2."No.",Cust2.Blocked);
    END;

    [External]
    PROCEDURE CustPrivacyBlockedErrorMessage@72(Cust2@1001 : Record 18;Transaction@1000 : Boolean);
    VAR
      Action@1002 : Text[30];
    BEGIN
      IF Transaction THEN
        Action := Text004
      ELSE
        Action := Text005;

      ERROR(PrivacyBlockedActionErr,Action,Cust2."No.");
    END;

    [External]
    PROCEDURE GetPrivacyBlockedGenericErrorText@73(Cust2@1001 : Record 18) : Text[250];
    BEGIN
      EXIT(STRSUBSTNO(PrivacyBlockedGenericTxt,Cust2."No."));
    END;

    [External]
    PROCEDURE DisplayMap@8();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::Customer,GETPOSITION)
      ELSE
        MESSAGE(Text014);
    END;

    [External]
    PROCEDURE GetTotalAmountLCY@10() : Decimal;
    BEGIN
      OnBeforeGetTotalAmountLCY(Rec);

      CALCFIELDS("Balance (LCY)","Outstanding Orders (LCY)","Shipped Not Invoiced (LCY)","Outstanding Invoices (LCY)",
        "Outstanding Serv. Orders (LCY)","Serv Shipped Not Invoiced(LCY)","Outstanding Serv.Invoices(LCY)");

      EXIT(GetTotalAmountLCYCommon);
    END;

    [External]
    PROCEDURE GetTotalAmountLCYUI@16() : Decimal;
    BEGIN
      OnBeforeGetTotalAmountLCYUI(Rec);

      SETAUTOCALCFIELDS("Balance (LCY)","Outstanding Orders (LCY)","Shipped Not Invoiced (LCY)","Outstanding Invoices (LCY)",
        "Outstanding Serv. Orders (LCY)","Serv Shipped Not Invoiced(LCY)","Outstanding Serv.Invoices(LCY)");

      EXIT(GetTotalAmountLCYCommon);
    END;

    LOCAL PROCEDURE GetTotalAmountLCYCommon@17() : Decimal;
    VAR
      SalesLine@1000 : Record 37;
      ServiceLine@1002 : Record 5902;
      SalesOutstandingAmountFromShipment@1001 : Decimal;
      ServOutstandingAmountFromShipment@1003 : Decimal;
      InvoicedPrepmtAmountLCY@1004 : Decimal;
      RetRcdNotInvAmountLCY@1006 : Decimal;
      AdditionalAmountLCY@1005 : Decimal;
    BEGIN
      OnBeforeGetTotalAmountLCYCommon(Rec,AdditionalAmountLCY);

      SalesOutstandingAmountFromShipment := SalesLine.OutstandingInvoiceAmountFromShipment("No.");
      ServOutstandingAmountFromShipment := ServiceLine.OutstandingInvoiceAmountFromShipment("No.");
      InvoicedPrepmtAmountLCY := GetInvoicedPrepmtAmountLCY;
      RetRcdNotInvAmountLCY := GetReturnRcdNotInvAmountLCY;

      EXIT("Balance (LCY)" + "Outstanding Orders (LCY)" + "Shipped Not Invoiced (LCY)" + "Outstanding Invoices (LCY)" +
        "Outstanding Serv. Orders (LCY)" + "Serv Shipped Not Invoiced(LCY)" + "Outstanding Serv.Invoices(LCY)" -
        SalesOutstandingAmountFromShipment - ServOutstandingAmountFromShipment - InvoicedPrepmtAmountLCY - RetRcdNotInvAmountLCY +
        AdditionalAmountLCY);
    END;

    [External]
    PROCEDURE GetSalesLCY@13() : Decimal;
    VAR
      CustomerSalesYTD@1005 : Record 18;
      AccountingPeriod@1004 : Record 50;
      StartDate@1001 : Date;
      EndDate@1000 : Date;
    BEGIN
      StartDate := AccountingPeriod.GetFiscalYearStartDate(WORKDATE);
      EndDate := AccountingPeriod.GetFiscalYearEndDate(WORKDATE);
      CustomerSalesYTD := Rec;
      CustomerSalesYTD."SECURITYFILTERING"("SECURITYFILTERING");
      CustomerSalesYTD.SETRANGE("Date Filter",StartDate,EndDate);
      CustomerSalesYTD.CALCFIELDS("Sales (LCY)");
      EXIT(CustomerSalesYTD."Sales (LCY)");
    END;

    [External]
    PROCEDURE CalcAvailableCredit@9() : Decimal;
    BEGIN
      EXIT(CalcAvailableCreditCommon(FALSE));
    END;

    [External]
    PROCEDURE CalcAvailableCreditUI@15() : Decimal;
    BEGIN
      EXIT(CalcAvailableCreditCommon(TRUE));
    END;

    LOCAL PROCEDURE CalcAvailableCreditCommon@14(CalledFromUI@1000 : Boolean) : Decimal;
    BEGIN
      IF "Credit Limit (LCY)" = 0 THEN
        EXIT(0);
      IF CalledFromUI THEN
        EXIT("Credit Limit (LCY)" - GetTotalAmountLCYUI);
      EXIT("Credit Limit (LCY)" - GetTotalAmountLCY);
    END;

    [External]
    PROCEDURE CalcOverdueBalance@11() OverDueBalance : Decimal;
    VAR
      CustLedgEntryRemainAmtQuery@1000 : Query 21 SECURITYFILTERING(Filtered);
    BEGIN
      CustLedgEntryRemainAmtQuery.SETRANGE(Customer_No,"No.");
      CustLedgEntryRemainAmtQuery.SETRANGE(IsOpen,TRUE);
      CustLedgEntryRemainAmtQuery.SETFILTER(Due_Date,'<%1',WORKDATE);
      CustLedgEntryRemainAmtQuery.OPEN;

      IF CustLedgEntryRemainAmtQuery.READ THEN
        OverDueBalance := CustLedgEntryRemainAmtQuery.Sum_Remaining_Amt_LCY;
    END;

    [External]
    PROCEDURE GetLegalEntityType@6() : Text;
    BEGIN
      EXIT(FORMAT("Partner Type"));
    END;

    [External]
    PROCEDURE GetLegalEntityTypeLbl@26() : Text;
    BEGIN
      EXIT(FIELDCAPTION("Partner Type"));
    END;

    [External]
    PROCEDURE SetStyle@12() : Text;
    BEGIN
      IF CalcAvailableCredit < 0 THEN
        EXIT('Unfavorable');
      EXIT('');
    END;

    [External]
    PROCEDURE HasValidDDMandate@23(Date@1000 : Date) : Boolean;
    VAR
      SEPADirectDebitMandate@1001 : Record 1230;
    BEGIN
      EXIT(SEPADirectDebitMandate.GetDefaultMandate("No.",Date) <> '');
    END;

    [External]
    PROCEDURE GetReturnRcdNotInvAmountLCY@53() : Decimal;
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      SalesLine.SETCURRENTKEY("Document Type","Bill-to Customer No.");
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::"Return Order");
      SalesLine.SETRANGE("Bill-to Customer No.","No.");
      SalesLine.CALCSUMS("Return Rcd. Not Invd. (LCY)");
      EXIT(SalesLine."Return Rcd. Not Invd. (LCY)");
    END;

    [External]
    PROCEDURE GetInvoicedPrepmtAmountLCY@18() : Decimal;
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      SalesLine.SETCURRENTKEY("Document Type","Bill-to Customer No.");
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Bill-to Customer No.","No.");
      SalesLine.CALCSUMS("Prepmt. Amount Inv. (LCY)","Prepmt. VAT Amount Inv. (LCY)");
      EXIT(SalesLine."Prepmt. Amount Inv. (LCY)" + SalesLine."Prepmt. VAT Amount Inv. (LCY)");
    END;

    [External]
    PROCEDURE CalcCreditLimitLCYExpendedPct@19() : Decimal;
    BEGIN
      IF "Credit Limit (LCY)" = 0 THEN
        EXIT(0);

      IF "Balance (LCY)" / "Credit Limit (LCY)" < 0 THEN
        EXIT(0);

      IF "Balance (LCY)" / "Credit Limit (LCY)" > 1 THEN
        EXIT(10000);

      EXIT(ROUND("Balance (LCY)" / "Credit Limit (LCY)" * 10000,1));
    END;

    [External]
    PROCEDURE CreateAndShowNewInvoice@21();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader."Document Type" := SalesHeader."Document Type"::Invoice;
      SalesHeader.SETRANGE("Sell-to Customer No.","No.");
      SalesHeader.SetDefaultPaymentServices;
      SalesHeader.INSERT(TRUE);
      COMMIT;
      PAGE.RUN(PAGE::"Sales Invoice",SalesHeader)
    END;

    [External]
    PROCEDURE CreateAndShowNewOrder@30();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader."Document Type" := SalesHeader."Document Type"::Order;
      SalesHeader.SETRANGE("Sell-to Customer No.","No.");
      SalesHeader.SetDefaultPaymentServices;
      SalesHeader.INSERT(TRUE);
      COMMIT;
      PAGE.RUN(PAGE::"Sales Order",SalesHeader)
    END;

    [External]
    PROCEDURE CreateAndShowNewCreditMemo@22();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader."Document Type" := SalesHeader."Document Type"::"Credit Memo";
      SalesHeader.SETRANGE("Sell-to Customer No.","No.");
      SalesHeader.INSERT(TRUE);
      COMMIT;
      PAGE.RUN(PAGE::"Sales Credit Memo",SalesHeader)
    END;

    [External]
    PROCEDURE CreateAndShowNewQuote@24();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader."Document Type" := SalesHeader."Document Type"::Quote;
      SalesHeader.SETRANGE("Sell-to Customer No.","No.");
      SalesHeader.INSERT(TRUE);
      COMMIT;
      PAGE.RUN(PAGE::"Sales Quote",SalesHeader)
    END;

    LOCAL PROCEDURE UpdatePaymentTolerance@20(UseDialog@1000 : Boolean);
    BEGIN
      IF "Block Payment Tolerance" THEN BEGIN
        IF UseDialog THEN
          IF NOT CONFIRM(RemovePaymentRoleranceQst,FALSE) THEN
            EXIT;
        PaymentToleranceMgt.DelTolCustLedgEntry(Rec);
      END ELSE BEGIN
        IF UseDialog THEN
          IF NOT CONFIRM(AllowPaymentToleranceQst,FALSE) THEN
            EXIT;
        PaymentToleranceMgt.CalcTolCustLedgEntry(Rec);
      END;
    END;

    [External]
    PROCEDURE GetBillToCustomerNo@27() : Code[20];
    BEGIN
      IF "Bill-to Customer No." <> '' THEN
        EXIT("Bill-to Customer No.");
      EXIT("No.");
    END;

    [External]
    PROCEDURE HasAddressIgnoreCountryCode@37() : Boolean;
    BEGIN
      CASE TRUE OF
        Address <> '':
          EXIT(TRUE);
        "Address 2" <> '':
          EXIT(TRUE);
        City <> '':
          EXIT(TRUE);
        County <> '':
          EXIT(TRUE);
        "Post Code" <> '':
          EXIT(TRUE);
        Contact <> '':
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE HasAddress@25() : Boolean;
    BEGIN
      EXIT(HasAddressIgnoreCountryCode OR ("Country/Region Code" <> ''));
    END;

    [External]
    PROCEDURE HasDifferentAddress@49(OtherCustomer@1000 : Record 18) : Boolean;
    BEGIN
      CASE TRUE OF
        Address <> OtherCustomer.Address:
          EXIT(TRUE);
        "Address 2" <> OtherCustomer."Address 2":
          EXIT(TRUE);
        City <> OtherCustomer.City:
          EXIT(TRUE);
        County <> OtherCustomer.County:
          EXIT(TRUE);
        "Post Code" <> OtherCustomer."Post Code":
          EXIT(TRUE);
        "Country/Region Code" <> OtherCustomer."Country/Region Code":
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE GetCustNo@44(CustomerText@1000 : Text) : Text;
    BEGIN
      EXIT(GetCustNoOpenCard(CustomerText,TRUE,TRUE));
    END;

    [External]
    PROCEDURE GetCustNoOpenCard@36(CustomerText@1000 : Text;ShowCustomerCard@1006 : Boolean;ShowCreateCustomerOption@1007 : Boolean) : Code[20];
    VAR
      Customer@1001 : Record 18;
      CustomerNo@1002 : Code[20];
      NoFiltersApplied@1008 : Boolean;
      CustomerWithoutQuote@1005 : Text;
      CustomerFilterFromStart@1004 : Text;
      CustomerFilterContains@1003 : Text;
    BEGIN
      IF CustomerText = '' THEN
        EXIT('');

      IF STRLEN(CustomerText) <= MAXSTRLEN(Customer."No.") THEN
        IF Customer.GET(COPYSTR(CustomerText,1,MAXSTRLEN(Customer."No."))) THEN
          EXIT(Customer."No.");

      Customer.SETRANGE(Blocked,Customer.Blocked::" ");
      Customer.SETRANGE(Name,CustomerText);
      IF Customer.FINDFIRST THEN
        EXIT(Customer."No.");

      Customer.SETCURRENTKEY(Name);

      CustomerWithoutQuote := CONVERTSTR(CustomerText,'''','?');
      Customer.SETFILTER(Name,'''@' + CustomerWithoutQuote + '''');
      IF Customer.FINDFIRST THEN
        EXIT(Customer."No.");
      Customer.SETRANGE(Name);

      CustomerFilterFromStart := '''@' + CustomerWithoutQuote + '*''';

      Customer.FILTERGROUP := -1;
      Customer.SETFILTER("No.",CustomerFilterFromStart);

      Customer.SETFILTER(Name,CustomerFilterFromStart);

      IF Customer.FINDFIRST THEN
        EXIT(Customer."No.");

      CustomerFilterContains := '''@*' + CustomerWithoutQuote + '*''';

      Customer.SETFILTER("No.",CustomerFilterContains);
      Customer.SETFILTER(Name,CustomerFilterContains);
      Customer.SETFILTER(City,CustomerFilterContains);
      Customer.SETFILTER(Contact,CustomerFilterContains);
      Customer.SETFILTER("Phone No.",CustomerFilterContains);
      Customer.SETFILTER("Post Code",CustomerFilterContains);

      IF Customer.COUNT = 0 THEN
        MarkCustomersWithSimilarName(Customer,CustomerText);

      IF Customer.COUNT = 1 THEN BEGIN
        Customer.FINDFIRST;
        EXIT(Customer."No.");
      END;

      IF NOT GUIALLOWED THEN
        ERROR(SelectCustErr);

      IF Customer.COUNT = 0 THEN BEGIN
        IF Customer.WRITEPERMISSION THEN
          IF ShowCreateCustomerOption THEN
            CASE STRMENU(
                   STRSUBSTNO(
                     '%1,%2',STRSUBSTNO(CreateNewCustTxt,CONVERTSTR(CustomerText,',','.')),SelectCustTxt),1,CustNotRegisteredTxt) OF
              0:
                ERROR(SelectCustErr);
              1:
                EXIT(CreateNewCustomer(COPYSTR(CustomerText,1,MAXSTRLEN(Customer.Name)),ShowCustomerCard));
            END
          ELSE
            EXIT('');
        Customer.RESET;
        NoFiltersApplied := TRUE;
      END;

      IF ShowCustomerCard THEN
        CustomerNo := PickCustomer(Customer,NoFiltersApplied)
      ELSE BEGIN
        LookupRequested := TRUE;
        EXIT('');
      END;

      IF CustomerNo <> '' THEN
        EXIT(CustomerNo);

      ERROR(SelectCustErr);
    END;

    LOCAL PROCEDURE MarkCustomersWithSimilarName@33(VAR Customer@1001 : Record 18;CustomerText@1000 : Text);
    VAR
      TypeHelper@1002 : Codeunit 10;
      CustomerCount@1003 : Integer;
      CustomerTextLength@1004 : Integer;
      Treshold@1005 : Integer;
    BEGIN
      IF CustomerText = '' THEN
        EXIT;
      IF STRLEN(CustomerText) > MAXSTRLEN(Customer.Name) THEN
        EXIT;
      CustomerTextLength := STRLEN(CustomerText);
      Treshold := CustomerTextLength DIV 5;
      IF Treshold = 0 THEN
        EXIT;

      Customer.RESET;
      Customer.ASCENDING(FALSE); // most likely to search for newest customers
      Customer.SETRANGE(Blocked,Customer.Blocked::" ");
      IF Customer.FINDSET THEN
        REPEAT
          CustomerCount += 1;
          IF ABS(CustomerTextLength - STRLEN(Customer.Name)) <= Treshold THEN
            IF TypeHelper.TextDistance(UPPERCASE(CustomerText),UPPERCASE(Customer.Name)) <= Treshold THEN
              Customer.MARK(TRUE);
        UNTIL Customer.MARK OR (Customer.NEXT = 0) OR (CustomerCount > 1000);
      Customer.MARKEDONLY(TRUE);
    END;

    [External]
    PROCEDURE CreateNewCustomer@28(CustomerName@1000 : Text[100];ShowCustomerCard@1001 : Boolean) : Code[20];
    VAR
      Customer@1005 : Record 18;
      MiniCustomerTemplate@1006 : Record 1300;
      CustomerCard@1002 : Page 21;
    BEGIN
      Customer.Name := CustomerName;
      IF NOT MiniCustomerTemplate.NewCustomerFromTemplate(Customer) THEN
        Customer.INSERT(TRUE)
      ELSE
        IF CustomerName <> Customer.Name THEN BEGIN
          Customer.Name := CustomerName;
          Customer.MODIFY(TRUE);
        END;

      COMMIT;
      IF NOT ShowCustomerCard THEN
        EXIT(Customer."No.");
      Customer.SETRANGE("No.",Customer."No.");
      CustomerCard.SETTABLEVIEW(Customer);
      IF NOT (CustomerCard.RUNMODAL = ACTION::OK) THEN
        ERROR(SelectCustErr);

      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE PickCustomer@51(VAR Customer@1000 : Record 18;NoFiltersApplied@1002 : Boolean) : Code[20];
    VAR
      CustomerList@1001 : Page 22;
    BEGIN
      IF NOT NoFiltersApplied THEN
        MarkCustomersByFilters(Customer);

      CustomerList.SETTABLEVIEW(Customer);
      CustomerList.SETRECORD(Customer);
      CustomerList.LOOKUPMODE := TRUE;
      IF CustomerList.RUNMODAL = ACTION::LookupOK THEN
        CustomerList.GETRECORD(Customer)
      ELSE
        CLEAR(Customer);

      EXIT(Customer."No.");
    END;

    PROCEDURE LookupCustomer@77(VAR Customer@1000 : Record 18) : Boolean;
    VAR
      CustomerLookup@1001 : Page 33;
      Result@1002 : Boolean;
    BEGIN
      CustomerLookup.SETTABLEVIEW(Customer);
      CustomerLookup.SETRECORD(Customer);
      CustomerLookup.LOOKUPMODE := TRUE;
      Result := CustomerLookup.RUNMODAL = ACTION::LookupOK;
      IF Result THEN
        CustomerLookup.GETRECORD(Customer)
      ELSE
        CLEAR(Customer);

      EXIT(Result);
    END;

    LOCAL PROCEDURE MarkCustomersByFilters@42(VAR Customer@1000 : Record 18);
    BEGIN
      IF Customer.FINDSET THEN
        REPEAT
          Customer.MARK(TRUE);
        UNTIL Customer.NEXT = 0;
      IF Customer.FINDFIRST THEN;
      Customer.MARKEDONLY := TRUE;
    END;

    [External]
    PROCEDURE OpenCustomerLedgerEntries@31(FilterOnDueEntries@1002 : Boolean);
    VAR
      DetailedCustLedgEntry@1001 : Record 379;
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Customer No.","No.");
      COPYFILTER("Global Dimension 1 Filter",DetailedCustLedgEntry."Initial Entry Global Dim. 1");
      COPYFILTER("Global Dimension 2 Filter",DetailedCustLedgEntry."Initial Entry Global Dim. 2");
      IF FilterOnDueEntries AND (GETFILTER("Date Filter") <> '') THEN BEGIN
        COPYFILTER("Date Filter",DetailedCustLedgEntry."Initial Entry Due Date");
        DetailedCustLedgEntry.SETFILTER("Posting Date",'<=%1',GETRANGEMAX("Date Filter"));
      END;
      COPYFILTER("Currency Filter",DetailedCustLedgEntry."Currency Code");
      CustLedgerEntry.DrillDownOnEntries(DetailedCustLedgEntry);
    END;

    [External]
    PROCEDURE SetInsertFromTemplate@32(FromTemplate@1000 : Boolean);
    BEGIN
      InsertFromTemplate := FromTemplate;
    END;

    [External]
    PROCEDURE IsLookupRequested@34() Result : Boolean;
    BEGIN
      Result := LookupRequested;
      LookupRequested := FALSE;
    END;

    LOCAL PROCEDURE IsContactUpdateNeeded@48() : Boolean;
    VAR
      CustContUpdate@1001 : Codeunit 5056;
      UpdateNeeded@1000 : Boolean;
    BEGIN
      UpdateNeeded :=
        (Name <> xRec.Name) OR
        ("Search Name" <> xRec."Search Name") OR
        ("Name 2" <> xRec."Name 2") OR
        (Address <> xRec.Address) OR
        ("Address 2" <> xRec."Address 2") OR
        (City <> xRec.City) OR
        ("Phone No." <> xRec."Phone No.") OR
        ("Telex No." <> xRec."Telex No.") OR
        ("Territory Code" <> xRec."Territory Code") OR
        ("Currency Code" <> xRec."Currency Code") OR
        ("Language Code" <> xRec."Language Code") OR
        ("Salesperson Code" <> xRec."Salesperson Code") OR
        ("Country/Region Code" <> xRec."Country/Region Code") OR
        ("Fax No." <> xRec."Fax No.") OR
        ("Telex Answer Back" <> xRec."Telex Answer Back") OR
        ("VAT Registration No." <> xRec."VAT Registration No.") OR
        ("Post Code" <> xRec."Post Code") OR
        (County <> xRec.County) OR
        ("E-Mail" <> xRec."E-Mail") OR
        ("Home Page" <> xRec."Home Page") OR
        (Contact <> xRec.Contact);

      IF NOT UpdateNeeded AND NOT ISTEMPORARY THEN
        UpdateNeeded := CustContUpdate.ContactNameIsBlank("No.");

      IF ForceUpdateContact THEN
        UpdateNeeded := TRUE;

      OnBeforeIsContactUpdateNeeded(Rec,xRec,UpdateNeeded);
      EXIT(UpdateNeeded);
    END;

    [External]
    PROCEDURE IsBlocked@52() : Boolean;
    BEGIN
      IF Blocked <> Blocked::" " THEN
        EXIT(TRUE);

      IF "Privacy Blocked" THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE HasAnyOpenOrPostedDocuments@60() : Boolean;
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      CustLedgerEntry@1002 : Record 21;
      HasAnyDocs@1003 : Boolean;
    BEGIN
      SalesHeader.SETRANGE("Sell-to Customer No.","No.");
      IF SalesHeader.FINDFIRST THEN
        EXIT(TRUE);

      SalesLine.SETCURRENTKEY("Document Type","Bill-to Customer No.");
      SalesLine.SETRANGE("Bill-to Customer No.","No.");
      IF SalesLine.FINDFIRST THEN
        EXIT(TRUE);

      SalesLine.SETRANGE("Bill-to Customer No.");
      SalesLine.SETRANGE("Sell-to Customer No.","No.");
      IF SalesLine.FINDFIRST THEN
        EXIT(TRUE);

      CustLedgerEntry.SETRANGE("Customer No.","No.");
      IF NOT CustLedgerEntry.ISEMPTY THEN
        EXIT(TRUE);

      HasAnyDocs := FALSE;
      OnAfterHasAnyOpenOrPostedDocuments(Rec,HasAnyDocs);
      EXIT(HasAnyDocs);
    END;

    [External]
    PROCEDURE CopyFromCustomerTemplate@63(CustomerTemplate@1000 : Record 5105);
    BEGIN
      "Territory Code" := CustomerTemplate."Territory Code";
      "Global Dimension 1 Code" := CustomerTemplate."Global Dimension 1 Code";
      "Global Dimension 2 Code" := CustomerTemplate."Global Dimension 2 Code";
      "Customer Posting Group" := CustomerTemplate."Customer Posting Group";
      "Currency Code" := CustomerTemplate."Currency Code";
      "Invoice Disc. Code" := CustomerTemplate."Invoice Disc. Code";
      "Customer Price Group" := CustomerTemplate."Customer Price Group";
      "Customer Disc. Group" := CustomerTemplate."Customer Disc. Group";
      "Country/Region Code" := CustomerTemplate."Country/Region Code";
      "Allow Line Disc." := CustomerTemplate."Allow Line Disc.";
      "Gen. Bus. Posting Group" := CustomerTemplate."Gen. Bus. Posting Group";
      "VAT Bus. Posting Group" := CustomerTemplate."VAT Bus. Posting Group";
      VALIDATE("Payment Terms Code",CustomerTemplate."Payment Terms Code");
      VALIDATE("Payment Method Code",CustomerTemplate."Payment Method Code");
      "Prices Including VAT" := CustomerTemplate."Prices Including VAT";
      "Shipment Method Code" := CustomerTemplate."Shipment Method Code";

      OnAfterCopyFromCustomerTemplate(Rec,CustomerTemplate);
    END;

    LOCAL PROCEDURE CopyContactPicture@38(VAR Cont@1000 : Record 5050);
    VAR
      TempNameValueBuffer@1005 : TEMPORARY Record 823;
      FileManagement@1001 : Codeunit 419;
      ConfirmManagement@1002 : Codeunit 27;
      ExportPath@1006 : Text;
    BEGIN
      IF Image.HASVALUE THEN
        IF NOT ConfirmManagement.ConfirmProcess(OverrideImageQst,TRUE) THEN
          EXIT;

      ExportPath := TEMPORARYPATH + Cont."No." + FORMAT(Cont.Image.MEDIAID);
      Cont.Image.EXPORTFILE(ExportPath);
      FileManagement.GetServerDirectoryFilesList(TempNameValueBuffer,TEMPORARYPATH);
      TempNameValueBuffer.SETFILTER(Name,STRSUBSTNO('%1*',ExportPath));
      TempNameValueBuffer.FINDFIRST;

      CLEAR(Image);
      Image.IMPORTFILE(TempNameValueBuffer.Name,'');
      MODIFY;
      IF FileManagement.DeleteServerFile(TempNameValueBuffer.Name) THEN;
    END;

    [External]
    PROCEDURE GetInsertFromContact@69() : Boolean;
    BEGIN
      EXIT(InsertFromContact);
    END;

    [External]
    PROCEDURE GetInsertFromTemplate@68() : Boolean;
    BEGIN
      EXIT(InsertFromTemplate);
    END;

    LOCAL PROCEDURE SetDefaultSalesperson@35();
    VAR
      UserSetup@1000 : Record 91;
    BEGIN
      IF NOT UserSetup.GET(USERID) THEN
        EXIT;

      IF UserSetup."Salespers./Purch. Code" <> '' THEN
        VALIDATE("Salesperson Code",UserSetup."Salespers./Purch. Code");
    END;

    LOCAL PROCEDURE SetLastModifiedDateTime@39();
    BEGIN
      "Last Modified Date Time" := CURRENTDATETIME;
      "Last Date Modified" := TODAY;
    END;

    LOCAL PROCEDURE VATRegistrationValidation@47();
    VAR
      VATRegistrationNoFormat@1005 : Record 381;
      VATRegistrationLog@1004 : Record 249;
      VATRegNoSrvConfig@1003 : Record 248;
      VATRegistrationLogMgt@1002 : Codeunit 249;
      ResultRecordRef@1001 : RecordRef;
      ApplicableCountryCode@1000 : Code[10];
      IsHandled@1006 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeVATRegistrationValidation(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF NOT VATRegistrationNoFormat.Test("VAT Registration No.","Country/Region Code","No.",DATABASE::Customer) THEN
        EXIT;
      VATRegistrationLogMgt.LogCustomer(Rec);
      IF ("Country/Region Code" = '') AND (VATRegistrationNoFormat."Country/Region Code" = '') THEN
        EXIT;
      ApplicableCountryCode := "Country/Region Code";
      IF ApplicableCountryCode = '' THEN
        ApplicableCountryCode := VATRegistrationNoFormat."Country/Region Code";
      IF VATRegNoSrvConfig.VATRegNoSrvIsEnabled THEN BEGIN
        VATRegistrationLogMgt.ValidateVATRegNoWithVIES(ResultRecordRef,Rec,"No.",
          VATRegistrationLog."Account Type"::Customer,ApplicableCountryCode);
        ResultRecordRef.SETTABLE(Rec);
      END;
    END;

    [External]
    PROCEDURE SetAddress@40(CustomerAddress@1001 : Text[100];CustomerAddress2@1002 : Text[50];CustomerPostCode@1003 : Code[20];CustomerCity@1000 : Text[30];CustomerCounty@1004 : Text[30];CustomerCountryCode@1005 : Code[10];CustomerContact@1006 : Text[100]);
    BEGIN
      Address := CustomerAddress;
      "Address 2" := CustomerAddress2;
      "Post Code" := CustomerPostCode;
      City := CustomerCity;
      County := CustomerCounty;
      "Country/Region Code" := CustomerCountryCode;
      UpdateContFromCust.OnModify(Rec);
      Contact := CustomerContact;
    END;

    [External]
    PROCEDURE FindByEmail@41(VAR Customer@1001 : Record 18;Email@1000 : Text) : Boolean;
    VAR
      LocalContact@1002 : Record 5050;
      ContactBusinessRelation@1003 : Record 5054;
      MarketingSetup@1004 : Record 5079;
    BEGIN
      Customer.SETRANGE("E-Mail",Email);
      IF Customer.FINDFIRST THEN
        EXIT(TRUE);

      Customer.SETRANGE("E-Mail");
      LocalContact.SETRANGE("E-Mail",Email);
      IF LocalContact.FINDSET THEN BEGIN
        MarketingSetup.GET;
        REPEAT
          IF ContactBusinessRelation.GET(LocalContact."No.",MarketingSetup."Bus. Rel. Code for Customers") THEN BEGIN
            Customer.GET(ContactBusinessRelation."No.");
            EXIT(TRUE);
          END;
        UNTIL LocalContact.NEXT = 0
      END;
    END;

    [External]
    PROCEDURE UpdateReferencedIds@61();
    VAR
      GraphMgtGeneralTools@1000 : Codeunit 5465;
    BEGIN
      IF ISTEMPORARY THEN
        EXIT;

      IF NOT GraphMgtGeneralTools.IsApiEnabled THEN
        EXIT;

      UpdateCurrencyId;
      UpdatePaymentTermsId;
      UpdateShipmentMethodId;
      UpdatePaymentMethodId;
      UpdateTaxAreaId;
    END;

    [External]
    PROCEDURE GetReferencedIds@46(VAR TempField@1000 : TEMPORARY Record 2000000041);
    VAR
      DataTypeManagement@1001 : Codeunit 701;
    BEGIN
      DataTypeManagement.InsertFieldToBuffer(TempField,DATABASE::Customer,FIELDNO("Currency Id"));
      DataTypeManagement.InsertFieldToBuffer(TempField,DATABASE::Customer,FIELDNO("Payment Terms Id"));
      DataTypeManagement.InsertFieldToBuffer(TempField,DATABASE::Customer,FIELDNO("Payment Method Id"));
      DataTypeManagement.InsertFieldToBuffer(TempField,DATABASE::Customer,FIELDNO("Shipment Method Id"));
      DataTypeManagement.InsertFieldToBuffer(TempField,DATABASE::Customer,FIELDNO("Tax Area ID"));
    END;

    [External]
    PROCEDURE SetForceUpdateContact@65(NewForceUpdateContact@1000 : Boolean);
    BEGIN
      ForceUpdateContact := NewForceUpdateContact;
    END;

    LOCAL PROCEDURE UpdateCurrencyCode@54();
    VAR
      Currency@1001 : Record 4;
    BEGIN
      IF NOT ISNULLGUID("Currency Id") THEN BEGIN
        Currency.SETRANGE(Id,"Currency Id");
        Currency.FINDFIRST;
      END;

      VALIDATE("Currency Code",Currency.Code);
    END;

    LOCAL PROCEDURE UpdatePaymentTermsCode@56();
    VAR
      PaymentTerms@1001 : Record 3;
    BEGIN
      IF NOT ISNULLGUID("Payment Terms Id") THEN BEGIN
        PaymentTerms.SETRANGE(Id,"Payment Terms Id");
        PaymentTerms.FINDFIRST;
      END;

      VALIDATE("Payment Terms Code",PaymentTerms.Code);
    END;

    LOCAL PROCEDURE UpdateShipmentMethodCode@58();
    VAR
      ShipmentMethod@1001 : Record 10;
    BEGIN
      IF NOT ISNULLGUID("Shipment Method Id") THEN BEGIN
        ShipmentMethod.SETRANGE(Id,"Shipment Method Id");
        ShipmentMethod.FINDFIRST;
      END;

      VALIDATE("Shipment Method Code",ShipmentMethod.Code);
    END;

    LOCAL PROCEDURE UpdatePaymentMethodCode@43();
    VAR
      PaymentMethod@1001 : Record 289;
    BEGIN
      IF NOT ISNULLGUID("Payment Method Id") THEN BEGIN
        PaymentMethod.SETRANGE(Id,"Payment Method Id");
        PaymentMethod.FINDFIRST;
      END;

      VALIDATE("Payment Method Code",PaymentMethod.Code);
    END;

    [External]
    PROCEDURE UpdateCurrencyId@55();
    VAR
      Currency@1000 : Record 4;
    BEGIN
      IF "Currency Code" = '' THEN BEGIN
        CLEAR("Currency Id");
        EXIT;
      END;

      IF NOT Currency.GET("Currency Code") THEN
        EXIT;

      "Currency Id" := Currency.Id;
    END;

    [External]
    PROCEDURE UpdatePaymentTermsId@57();
    VAR
      PaymentTerms@1000 : Record 3;
    BEGIN
      IF "Payment Terms Code" = '' THEN BEGIN
        CLEAR("Payment Terms Id");
        EXIT;
      END;

      IF NOT PaymentTerms.GET("Payment Terms Code") THEN
        EXIT;

      "Payment Terms Id" := PaymentTerms.Id;
    END;

    [External]
    PROCEDURE UpdateShipmentMethodId@59();
    VAR
      ShipmentMethod@1000 : Record 10;
    BEGIN
      IF "Shipment Method Code" = '' THEN BEGIN
        CLEAR("Shipment Method Id");
        EXIT;
      END;

      IF NOT ShipmentMethod.GET("Shipment Method Code") THEN
        EXIT;

      "Shipment Method Id" := ShipmentMethod.Id;
    END;

    [External]
    PROCEDURE UpdatePaymentMethodId@45();
    VAR
      PaymentMethod@1000 : Record 289;
    BEGIN
      IF "Payment Method Code" = '' THEN BEGIN
        CLEAR("Payment Method Id");
        EXIT;
      END;

      IF NOT PaymentMethod.GET("Payment Method Code") THEN
        EXIT;

      "Payment Method Id" := PaymentMethod.Id;
    END;

    [External]
    PROCEDURE UpdateTaxAreaId@1166();
    VAR
      VATBusinessPostingGroup@1002 : Record 323;
      TaxArea@1000 : Record 318;
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      IF GeneralLedgerSetup.UseVat THEN BEGIN
        IF "VAT Bus. Posting Group" = '' THEN BEGIN
          CLEAR("Tax Area ID");
          EXIT;
        END;

        IF NOT VATBusinessPostingGroup.GET("VAT Bus. Posting Group") THEN
          EXIT;

        "Tax Area ID" := VATBusinessPostingGroup.Id;
      END ELSE BEGIN
        IF "Tax Area Code" = '' THEN BEGIN
          CLEAR("Tax Area ID");
          EXIT;
        END;

        IF NOT TaxArea.GET("Tax Area Code") THEN
          EXIT;

        "Tax Area ID" := TaxArea.Id;
      END;
    END;

    LOCAL PROCEDURE UpdateTaxAreaCode@1164();
    VAR
      TaxArea@1001 : Record 318;
      VATBusinessPostingGroup@1000 : Record 323;
      GeneralLedgerSetup@1002 : Record 98;
    BEGIN
      IF ISNULLGUID("Tax Area ID") THEN
        EXIT;

      IF GeneralLedgerSetup.UseVat THEN BEGIN
        VATBusinessPostingGroup.SETRANGE(Id,"Tax Area ID");
        VATBusinessPostingGroup.FINDFIRST;
        "VAT Bus. Posting Group" := VATBusinessPostingGroup.Code;
      END ELSE BEGIN
        TaxArea.SETRANGE(Id,"Tax Area ID");
        TaxArea.FINDFIRST;
        "Tax Area Code" := TaxArea.Code;
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeIsContactUpdateNeeded@50(Customer@1000 : Record 18;xCustomer@1001 : Record 18;VAR UpdateNeeded@1002 : Boolean);
    BEGIN
    END;

    LOCAL PROCEDURE ValidateSalesPersonCode@1900();
    BEGIN
      IF "Salesperson Code" <> '' THEN
        IF SalespersonPurchaser.GET("Salesperson Code") THEN
          IF SalespersonPurchaser.VerifySalesPersonPurchaserPrivacyBlocked(SalespersonPurchaser) THEN
            ERROR(SalespersonPurchaser.GetPrivacyBlockedGenericText(SalespersonPurchaser,TRUE))
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyFromCustomerTemplate@64(VAR Customer@1000 : Record 18;CustomerTemplate@1001 : Record 5105);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterHasAnyOpenOrPostedDocuments@62(VAR Customer@1000 : Record 18;VAR HasAnyDocs@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterValidateCity@75(VAR Customer@1000 : Record 18;xCustomer@1001 : Record 18);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterValidatePostCode@71(VAR Customer@1001 : Record 18;xCustomer@1000 : Record 18);
    BEGIN
    END;

    LOCAL PROCEDURE IsOnBeforeCheckBlockedCustHandled@67(Customer@1003 : Record 18;Source@1004 : 'Journal,Document';DocType@1002 : Option;Shipment@1001 : Boolean;Transaction@1000 : Boolean) IsHandled : Boolean;
    BEGIN
      OnBeforeCheckBlockedCust(Customer,Source,DocType,Shipment,Transaction,IsHandled)
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckBlockedCust@66(Customer@1003 : Record 18;Source@1005 : 'Journal,Document';DocType@1002 : Option;Shipment@1001 : Boolean;Transaction@1000 : Boolean;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetTotalAmountLCY@76(VAR Customer@1000 : Record 18);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetTotalAmountLCYUI@79(VAR Customer@1000 : Record 18);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetTotalAmountLCYCommon@80(VAR Customer@1000 : Record 18;VAR AdditionalAmountLCY@1001 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeValidateShortcutDimCode@70(VAR Customer@1000 : Record 18;FieldNumber@1002 : Integer;VAR ShortcutDimCode@1001 : Code[20];VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeVATRegistrationValidation@74(VAR Customer@1000 : Record 18;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 50000 Demo Entry
{
  OBJECT-PROPERTIES
  {
    Date=08/24/24;
    Time=12:40:30 PM;
    Modified=Yes;
    Version List=UPGDemo;
  }
  PROPERTIES
  {
    CaptionML=[ENU=G/L Entry;
               ENG=G/L Entry];
    LookupPageID=Page20;
    DrillDownPageID=Page20;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              ENG=Entry No.] }
    { 3   ;   ;G/L Account No.     ;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=[ENU=G/L Account No.;
                                                              ENG=G/L Account No.] }
    { 4   ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENG=Posting Date];
                                                   ClosingDates=Yes }
    { 5   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENG=Document Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENG=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 6   ;   ;Document No.        ;Code20        ;OnLookup=VAR
                                                              IncomingDocument@1000 : Record 130;
                                                            BEGIN
                                                            END;

                                                   CaptionML=[ENU=Document No.;
                                                              ENG=Document No.] }
    { 7   ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 10  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Bal. Account Type=CONST(IC Partner)) "IC Partner"
                                                                 ELSE IF (Bal. Account Type=CONST(Employee)) Employee;
                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ENG=Bal. Account No.] }
    { 17  ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              ENG=Amount];
                                                   AutoFormatType=1 }
    { 23  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              ENG=Global Dimension 1 Code];
                                                   CaptionClass='1,1,1' }
    { 24  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              ENG=Global Dimension 2 Code];
                                                   CaptionClass='1,1,2' }
    { 27  ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=User ID;
                                                              ENG=User ID] }
    { 28  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              ENG=Source Code] }
    { 29  ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              ENG=System-Created Entry] }
    { 30  ;   ;Prior-Year Entry    ;Boolean       ;CaptionML=[ENU=Prior-Year Entry;
                                                              ENG=Prior-Year Entry] }
    { 41  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Job No.;
                                                              ENG=Job No.] }
    { 42  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              ENG=Quantity];
                                                   DecimalPlaces=0:5 }
    { 43  ;   ;VAT Amount          ;Decimal       ;CaptionML=[ENU=VAT Amount;
                                                              ENG=VAT Amount];
                                                   AutoFormatType=1 }
    { 45  ;   ;Business Unit Code  ;Code20        ;TableRelation="Business Unit";
                                                   CaptionML=[ENU=Business Unit Code;
                                                              ENG=Business Unit Code] }
    { 46  ;   ;Journal Batch Name  ;Code10        ;CaptionML=[ENU=Journal Batch Name;
                                                              ENG=Journal Batch Name] }
    { 47  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ENG=Reason Code] }
    { 48  ;   ;Gen. Posting Type   ;Option        ;CaptionML=[ENU=Gen. Posting Type;
                                                              ENG=Gen. Posting Type];
                                                   OptionCaptionML=[ENU=" ,Purchase,Sale,Settlement";
                                                                    ENG=" ,Purchase,Sale,Settlement"];
                                                   OptionString=[ ,Purchase,Sale,Settlement] }
    { 49  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENG=Gen. Bus. Posting Group] }
    { 50  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENG=Gen. Prod. Posting Group] }
    { 51  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              ENG=Bal. Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,Employee;
                                                                    ENG=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,Employee];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,Employee }
    { 52  ;   ;Transaction No.     ;Integer       ;CaptionML=[ENU=Transaction No.;
                                                              ENG=Transaction No.] }
    { 53  ;   ;Debit Amount        ;Decimal       ;CaptionML=[ENU=Debit Amount;
                                                              ENG=Debit Amount];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 54  ;   ;Credit Amount       ;Decimal       ;CaptionML=[ENU=Credit Amount;
                                                              ENG=Credit Amount];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 55  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ENG=Document Date];
                                                   ClosingDates=Yes }
    { 56  ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              ENG=External Document No.] }
    { 57  ;   ;Source Type         ;Option        ;CaptionML=[ENU=Source Type;
                                                              ENG=Source Type];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bank Account,Fixed Asset,Employee";
                                                                    ENG=" ,Customer,Vendor,Bank Account,Fixed Asset,Employee"];
                                                   OptionString=[ ,Customer,Vendor,Bank Account,Fixed Asset,Employee] }
    { 58  ;   ;Source No.          ;Code20        ;TableRelation=IF (Source Type=CONST(Customer)) Customer
                                                                 ELSE IF (Source Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Source Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Source Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Source Type=CONST(Employee)) Employee;
                                                   CaptionML=[ENU=Source No.;
                                                              ENG=Source No.] }
    { 59  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENG=No. Series] }
    { 60  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENG=VAT Area Code] }
    { 61  ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENG=VAT Liable] }
    { 62  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Code;
                                                              ENG=VAT Group Code] }
    { 63  ;   ;Use Tax             ;Boolean       ;CaptionML=[ENU=Use Tax;
                                                              ENG=Use Tax] }
    { 64  ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENG=VAT Bus. Posting Group] }
    { 65  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ENG=VAT Prod. Posting Group] }
    { 68  ;   ;Additional-Currency Amount;Decimal ;AccessByPermission=TableData 4=R;
                                                   CaptionML=[ENU=Additional-Currency Amount;
                                                              ENG=Additional-Currency Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 69  ;   ;Add.-Currency Debit Amount;Decimal ;CaptionML=[ENU=Add.-Currency Debit Amount;
                                                              ENG=Add.-Currency Debit Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 70  ;   ;Add.-Currency Credit Amount;Decimal;CaptionML=[ENU=Add.-Currency Credit Amount;
                                                              ENG=Add.-Currency Credit Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 71  ;   ;Close Income Statement Dim. ID;Integer;
                                                   CaptionML=[ENU=Close Income Statement Dim. ID;
                                                              ENG=Close Income Statement Dim. ID] }
    { 72  ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=IC Partner Code;
                                                              ENG=IC Partner Code] }
    { 73  ;   ;Reversed            ;Boolean       ;CaptionML=[ENU=Reversed;
                                                              ENG=Reversed] }
    { 74  ;   ;Reversed by Entry No.;Integer      ;TableRelation="G/L Entry";
                                                   CaptionML=[ENU=Reversed by Entry No.;
                                                              ENG=Reversed by Entry No.];
                                                   BlankZero=Yes }
    { 75  ;   ;Reversed Entry No.  ;Integer       ;TableRelation="G/L Entry";
                                                   CaptionML=[ENU=Reversed Entry No.;
                                                              ENG=Reversed Entry No.];
                                                   BlankZero=Yes }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;G/L Account No.,Posting Date            ;SumIndexFields=Amount,Debit Amount,Credit Amount,Additional-Currency Amount,Add.-Currency Debit Amount,Add.-Currency Credit Amount,VAT Amount }
    {    ;G/L Account No.,Global Dimension 1 Code,Global Dimension 2 Code,Posting Date;
                                                   SumIndexFields=Amount,Debit Amount,Credit Amount,Additional-Currency Amount,Add.-Currency Debit Amount,Add.-Currency Credit Amount,VAT Amount }
    { No ;G/L Account No.,Business Unit Code,Posting Date;
                                                   SumIndexFields=Amount,Debit Amount,Credit Amount,Additional-Currency Amount,Add.-Currency Debit Amount,Add.-Currency Credit Amount }
    { No ;G/L Account No.,Business Unit Code,Global Dimension 1 Code,Global Dimension 2 Code,Posting Date;
                                                   SumIndexFields=Amount,Debit Amount,Credit Amount,Additional-Currency Amount,Add.-Currency Debit Amount,Add.-Currency Credit Amount }
    {    ;Document No.,Posting Date               ;SumIndexFields=Amount,Debit Amount,Credit Amount,Additional-Currency Amount,Add.-Currency Debit Amount,Add.-Currency Credit Amount,VAT Amount }
    {    ;Transaction No.                          }
    {    ;IC Partner Code                          }
    {    ;G/L Account No.,Job No.,Posting Date    ;SumIndexFields=Amount }
    {    ;Gen. Bus. Posting Group,Gen. Prod. Posting Group }
    {    ;VAT Bus. Posting Group,VAT Prod. Posting Group }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Entry No.,Description,G/L Account No.,Posting Date,Document Type,Document No. }
  }
  CODE
  {
    VAR
      GLSetup@1000 : Record 98;
      GLSetupRead@1002 : Boolean;

    [External]
    PROCEDURE GetCurrencyCode@1() : Code[10];
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
      END;
      EXIT(GLSetup."Additional Reporting Currency");
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50000 Load Data
{
  OBJECT-PROPERTIES
  {
    Date=08/25/24;
    Time=[ 3:39:21 AM];
    Modified=Yes;
    Version List=UPGDemo;
  }
  PROPERTIES
  {
    Subtype=Upgrade;
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [UpgradePerCompany]
    PROCEDURE AddData@1240060002();
    VAR
      Location@1240060000 : Record 14;
      Customer@1240060001 : Record 18;
      DemoEntry@1240060002 : Record 50000;
      GLEntry@1240060003 : Record 17;
      LocationNew@1240060005 : Record 14;
      CustomerNew@1240060004 : Record 18;
    BEGIN
      IF Location.FINDSET() THEN REPEAT
        LocationNew.GET(Location.Code);
        LocationNew.Shop := Location.Code;
        LocationNew.MODIFY();
      UNTIL(Location.NEXT()=0);

      IF Customer.FINDSET() THEN REPEAT
        CustomerNew.GET(Customer."No.");
        CustomerNew.Shop := Customer."No.";
        CustomerNew.MODIFY();
      UNTIL(Customer.NEXT()=0);

      IF GLEntry.FINDSET() THEN REPEAT
        DemoEntry.INIT;
        DemoEntry.TRANSFERFIELDS(GLEntry);
        DemoEntry.INSERT();
      UNTIL(GLEntry.NEXT()=0);
    END;

    BEGIN
    END.
  }
}

OBJECT Page 15 Location List
{
  OBJECT-PROPERTIES
  {
    Date=08/24/24;
    Time=12:41:36 PM;
    Modified=Yes;
    Version List=NAVW114.00,UPGDemo;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Locations;
               ENG=Locations];
    ApplicationArea=#Location;
    SourceTable=Table14;
    PageType=List;
    UsageCategory=Administration;
    AdditionalSearchTermsML=[ENU=warehouse setup,inventory setup;
                             ENG=warehouse setup,inventory setup];
    CardPageID=Location Card;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Navigate;
                                ENG=New,Process,Report,Navigate];
    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 9       ;1   ;ActionGroup;
                      CaptionML=[ENU=&Location;
                                 ENG=&Location];
                      Image=Warehouse }
      { 10      ;2   ;Action    ;
                      CaptionML=[ENU=&Resource Locations;
                                 ENG=&Resource Locations];
                      ToolTipML=[ENU=View or edit information about where resources are located. In this window, you can assign resources to locations.;
                                 ENG=View or edit information about where resources are located. In this window, you can assign resources to locations.];
                      ApplicationArea=#Location;
                      RunObject=Page 6015;
                      RunPageLink=Location Code=FIELD(Code);
                      Promoted=Yes;
                      Image=Resource;
                      PromotedCategory=Category4 }
      { 7300    ;2   ;Action    ;
                      CaptionML=[ENU=&Zones;
                                 ENG=&Zones];
                      ToolTipML=[ENU=View or edit information about zones that you use in your warehouse to structure your bins under zones.;
                                 ENG=View or edit information about zones that you use in your warehouse to structure your bins under zones.];
                      ApplicationArea=#Warehouse;
                      RunObject=Page 7300;
                      RunPageLink=Location Code=FIELD(Code);
                      Promoted=Yes;
                      Image=Zones;
                      PromotedCategory=Category4 }
      { 11      ;2   ;Action    ;
                      CaptionML=[ENU=&Bins;
                                 ENG=&Bins];
                      ToolTipML=[ENU=View or edit information about zones that you use in your warehouse to hold items.;
                                 ENG=View or edit information about zones that you use in your warehouse to hold items.];
                      ApplicationArea=#Warehouse;
                      RunObject=Page 7302;
                      RunPageLink=Location Code=FIELD(Code);
                      Promoted=Yes;
                      Image=Bins;
                      PromotedCategory=Category4 }
      { 1900000005;0 ;ActionContainer;
                      ActionContainerType=NewDocumentItems }
      { 1907283205;1 ;Action    ;
                      CaptionML=[ENU=Transfer Order;
                                 ENG=Transfer Order];
                      ToolTipML=[ENU=Prepare to transfer items to another location.;
                                 ENG=Prepare to transfer items to another location.];
                      ApplicationArea=#Location;
                      RunObject=Page 5740;
                      Promoted=Yes;
                      Image=Document;
                      PromotedCategory=New;
                      RunPageMode=Create }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1900888104;1 ;Action    ;
                      CaptionML=[ENU=Create Warehouse location;
                                 ENG=Create Warehouse location];
                      ToolTipML=[ENU=Enable the inventory location to use zones and bins to operate as a warehouse location. The batch job creates initial warehouse entries for the warehouse adjustment bin for all items that have inventory in the location. It is necessary to perform a physical inventory after this batch job is finished so that these initial entries can be balanced by posting warehouse physical inventory entries.;
                                 ENG=Enable the inventory location to use zones and bins to operate as a warehouse location. The batch job creates initial warehouse entries for the warehouse adjustment bin for all items that have inventory in the location. It is necessary to perform a physical inventory after this batch job is finished so that these initial entries can be balanced by posting warehouse physical inventory entries.];
                      ApplicationArea=#Warehouse;
                      RunObject=Report 5756;
                      Promoted=Yes;
                      Image=NewWarehouse;
                      PromotedCategory=Process }
      { 1900000006;0 ;ActionContainer;
                      ActionContainerType=Reports }
      { 1901320106;1 ;Action    ;
                      CaptionML=[ENU=Inventory - Inbound Transfer;
                                 ENG=Inventory - Inbound Transfer];
                      ToolTipML=[ENU=View the list of inbound transfers to the location.;
                                 ENG=View the list of inbound transfers to the location.];
                      ApplicationArea=#Location;
                      RunObject=Report 5702;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
      { 1907283206;1 ;Action    ;
                      CaptionML=[ENU=Transfer Order;
                                 ENG=Transfer Order];
                      ToolTipML=[ENU=Prepare to transfer items to another location.;
                                 ENG=Prepare to transfer items to another location.];
                      ApplicationArea=#Location;
                      RunObject=Report 5703;
                      Promoted=Yes;
                      Image=Document;
                      PromotedCategory=Report }
      { 1904855606;1 ;Action    ;
                      CaptionML=[ENU=Transfer Shipment;
                                 ENG=Transfer Shipment];
                      ToolTipML=[ENU=View the list of posted outbound transfers from the location.;
                                 ENG=View the list of posted outbound transfers from the location.];
                      ApplicationArea=#Location;
                      RunObject=Report 5704;
                      Promoted=No;
                      Image=Report;
                      PromotedCategory=Report }
      { 1901432206;1 ;Action    ;
                      CaptionML=[ENU=Transfer Receipt;
                                 ENG=Transfer Receipt];
                      ToolTipML=[ENU=View the list of posted inbound transfers to the location.;
                                 ENG=View the list of posted inbound transfers to the location.];
                      ApplicationArea=#Location;
                      RunObject=Report 5705;
                      Promoted=No;
                      Image=Report;
                      PromotedCategory=Report }
      { 1907335806;1 ;Action    ;
                      CaptionML=[ENU=Items with Negative Inventory;
                                 ENG=Items with Negative Inventory];
                      ToolTipML=[ENU=View a list of items with negative inventory.;
                                 ENG=View a list of items with negative inventory.];
                      ApplicationArea=#Location;
                      RunObject=Report 5757;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report;
                      PromotedOnly=Yes }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a location code for the warehouse or distribution center where your items are handled and stored before being sold.;
                           ENG=Specifies a location code for the warehouse or distribution centre where your items are handled and stored before being sold.];
                ApplicationArea=#Location;
                SourceExpr=Code }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the name or address of the location.;
                           ENG=Specifies the name or address of the location.];
                ApplicationArea=#Location;
                SourceExpr=Name }

    { 1240060000;2;Field  ;
                SourceExpr=Shop }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                ApplicationArea=#RecordLinks;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                ApplicationArea=#Notes;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {

    [External]
    PROCEDURE GetSelectionFilter@3() : Text;
    VAR
      Loc@1001 : Record 14;
      SelectionFilterManagement@1002 : Codeunit 46;
    BEGIN
      CurrPage.SETSELECTIONFILTER(Loc);
      EXIT(SelectionFilterManagement.GetSelectionFilterForLocation(Loc));
    END;

    BEGIN
    END.
  }
}

OBJECT Page 22 Customer List
{
  OBJECT-PROPERTIES
  {
    Date=08/24/24;
    Time=12:42:03 PM;
    Modified=Yes;
    Version List=NAVW114.11,UPGDemo;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Customers;
               ENG=Customers];
    ApplicationArea=#Basic,#Suite,#Service;
    SourceTable=Table18;
    PageType=List;
    UsageCategory=Lists;
    QueryCategory=Customer List;
    CardPageID=Customer Card;
    RefreshOnActivate=Yes;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Approve,New Document,Request Approval,Customer,Navigate;
                                ENG=New,Process,Report,Approve,New Document,Request Approval,Customer,Navigate];
    OnInit=BEGIN
             SetCustomerNoVisibilityOnFactBoxes;

             CaptionTxt := CurrPage.CAPTION;
             SetCaption(CaptionTxt);
             CurrPage.CAPTION(CaptionTxt);
             PowerBIVisible := FALSE;
             CurrPage."Power BI Report FactBox".PAGE.InitFactBox(CurrPage.OBJECTID(FALSE),CurrPage.CAPTION,PowerBIVisible);
           END;

    OnOpenPage=VAR
                 SocialListeningSetup@1001 : Record 870;
                 CRMIntegrationManagement@1000 : Codeunit 5330;
               BEGIN
                 CRMIntegrationEnabled := CRMIntegrationManagement.IsCRMIntegrationEnabled;
                 WITH SocialListeningSetup DO
                   SocialListeningSetupVisible := GET AND "Show on Customers" AND "Accept License Agreement" AND ("Solution ID" <> '');
                 SetWorkflowManagementEnabledState;
                 SETRANGE("Date Filter",0D,WORKDATE);
               END;

    OnAfterGetCurrRecord=VAR
                           CRMCouplingManagement@1001 : Codeunit 5331;
                           WorkflowWebhookManagement@1000 : Codeunit 1543;
                           SocialListeningMgt@1002 : Codeunit 871;
                         BEGIN
                           IF SocialListeningSetupVisible THEN
                             SocialListeningMgt.GetCustFactboxVisibility(Rec,SocialListeningSetupVisible,SocialListeningVisible);

                           IF CRMIntegrationEnabled THEN
                             CRMIsCoupledToRecord := CRMCouplingManagement.IsRecordCoupledToCRM(RECORDID);

                           OpenApprovalEntriesExist := ApprovalsMgmt.HasOpenApprovalEntries(RECORDID);

                           CanCancelApprovalForRecord := ApprovalsMgmt.CanCancelApprovalForRecord(RECORDID);

                           WorkflowWebhookManagement.GetCanRequestAndCanCancel(RECORDID,CanRequestApprovalForFlow,CanCancelApprovalForFlow);

                           // Contextual Power BI FactBox: send data to filter the report in the FactBox
                           CurrPage."Power BI Report FactBox".PAGE.SetCurrentListSelection("No.",FALSE,PowerBIVisible);

                           SetWorkflowManagementEnabledState;
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 16      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Customer;
                                 ENG=&Customer];
                      Image=Customer }
      { 20      ;2   ;Action    ;
                      CaptionML=[ENU=Co&mments;
                                 ENG=Co&mments];
                      ToolTipML=[ENU=View or add comments for the record.;
                                 ENG=View or add comments for the record.];
                      ApplicationArea=#Comments;
                      RunObject=Page 124;
                      RunPageLink=Table Name=CONST(Customer),
                                  No.=FIELD(No.);
                      Promoted=Yes;
                      Image=ViewComments;
                      PromotedCategory=Category7 }
      { 66      ;2   ;ActionGroup;
                      CaptionML=[ENU=Dimensions;
                                 ENG=Dimensions];
                      Image=Dimensions }
      { 84      ;3   ;Action    ;
                      Name=DimensionsSingle;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions-Single;
                                 ENG=Dimensions-Single];
                      ToolTipML=[ENU=View or edit the single set of dimensions that are set up for the selected record.;
                                 ENG=View or edit the single set of dimensions that are set up for the selected record.];
                      ApplicationArea=#Dimensions;
                      RunObject=Page 540;
                      RunPageLink=Table ID=CONST(18),
                                  No.=FIELD(No.);
                      Promoted=Yes;
                      Image=Dimensions;
                      PromotedCategory=Category7 }
      { 42      ;3   ;Action    ;
                      Name=DimensionsMultiple;
                      AccessByPermission=TableData 348=R;
                      CaptionML=[ENU=Dimensions-&Multiple;
                                 ENG=Dimensions-&Multiple];
                      ToolTipML=[ENU=View or edit dimensions for a group of records. You can assign dimension codes to transactions to distribute costs and analyze historical information.;
                                 ENG=View or edit dimensions for a group of records. You can assign dimension codes to transactions to distribute costs and analyse historical information.];
                      ApplicationArea=#Dimensions;
                      Promoted=Yes;
                      Image=DimensionSets;
                      PromotedCategory=Category7;
                      OnAction=VAR
                                 Cust@1001 : Record 18;
                                 DefaultDimMultiple@1002 : Page 542;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(Cust);
                                 DefaultDimMultiple.SetMultiRecord(Cust,FIELDNO("No."));
                                 DefaultDimMultiple.RUNMODAL;
                               END;
                                }
      { 58      ;2   ;Action    ;
                      CaptionML=[ENU=Bank Accounts;
                                 ENG=Bank Accounts];
                      ToolTipML=[ENU=View or set up the customer's bank accounts. You can set up any number of bank accounts for each customer.;
                                 ENG=View or set up the customer's bank accounts. You can set up any number of bank accounts for each customer.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 424;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=BankAccount }
      { 29      ;2   ;Action    ;
                      CaptionML=[ENU=Direct Debit Mandates;
                                 ENG=Direct Debit Mandates];
                      ToolTipML=[ENU=View the direct-debit mandates that reflect agreements with customers to collect invoice payments from their bank account.;
                                 ENG=View the direct-debit mandates that reflect agreements with customers to collect invoice payments from their bank account.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 1230;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=MakeAgreement }
      { 23      ;2   ;Action    ;
                      Name=ShipToAddresses;
                      CaptionML=[ENU=Ship-&to Addresses;
                                 ENG=Ship-&to Addresses];
                      ToolTipML=[ENU=View or edit alternate shipping addresses where the customer wants items delivered if different from the regular address.;
                                 ENG=View or edit alternate shipping addresses where the customer wants items delivered if different from the regular address.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 301;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=ShipAddress }
      { 60      ;2   ;Action    ;
                      AccessByPermission=TableData 5050=R;
                      CaptionML=[ENU=C&ontact;
                                 ENG=C&ontact];
                      ToolTipML=[ENU=View or edit detailed information about the contact person at the customer.;
                                 ENG=View or edit detailed information about the contact person at the customer.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=ContactPerson;
                      PromotedCategory=Category8;
                      OnAction=BEGIN
                                 ShowContact;
                               END;
                                }
      { 45      ;2   ;Action    ;
                      CaptionML=[ENU=Cross Re&ferences;
                                 ENG=Cross Re&ferences];
                      ToolTipML=[ENU=Set up the customer's own identification of items that you sell to the customer. Cross-references to the customer's item number means that the item number is automatically shown on sales documents instead of the number that you use.;
                                 ENG=Set up the customer's own identification of items that you sell to the customer. Cross-references to the customer's item number means that the item number is automatically shown on sales documents instead of the number that you use.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 5723;
                      RunPageView=SORTING(Cross-Reference Type,Cross-Reference Type No.);
                      RunPageLink=Cross-Reference Type=CONST(Customer),
                                  Cross-Reference Type No.=FIELD(No.);
                      Promoted=Yes;
                      Image=Change;
                      PromotedCategory=Category7 }
      { 64      ;2   ;Action    ;
                      Name=OnlineMap;
                      CaptionML=[ENU=Online Map;
                                 ENG=Online Map];
                      ToolTipML=[ENU=View the address on an online map.;
                                 ENG=View the address on an online map.];
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=FALSE;
                      PromotedIsBig=Yes;
                      Image=Map;
                      PromotedCategory=Category5;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 DisplayMap;
                               END;
                                }
      { 67      ;2   ;Action    ;
                      Name=ApprovalEntries;
                      AccessByPermission=TableData 454=R;
                      CaptionML=[ENU=Approvals;
                                 ENG=Approvals];
                      ToolTipML=[ENU=View a list of the records that are waiting to be approved. For example, you can see who requested the record to be approved, when it was sent, and when it is due to be approved.;
                                 ENG=View a list of the records that are waiting to be approved. For example, you can see who requested the record to be approved, when it was sent, and when it is due to be approved.];
                      ApplicationArea=#Suite;
                      Promoted=Yes;
                      Image=Approvals;
                      PromotedCategory=Category7;
                      OnAction=BEGIN
                                 ApprovalsMgmt.OpenApprovalEntriesPage(RECORDID);
                               END;
                                }
      { 44      ;1   ;ActionGroup;
                      Name=ActionGroupCRM;
                      CaptionML=[ENU=Dynamics 365 for Sales;
                                 ENG=Dynamics 365 for Sales];
                      Visible=CRMIntegrationEnabled }
      { 41      ;2   ;Action    ;
                      Name=CRMGotoAccount;
                      CaptionML=[ENU=Account;
                                 ENG=Account];
                      ToolTipML=[ENU=Open the coupled Dynamics 365 for Sales account.;
                                 ENG=Open the coupled Dynamics 365 for Sales account.];
                      ApplicationArea=#Suite;
                      Visible=CRMIntegrationEnabled;
                      Image=CoupledCustomer;
                      OnAction=VAR
                                 CRMIntegrationManagement@1000 : Codeunit 5330;
                               BEGIN
                                 CRMIntegrationManagement.ShowCRMEntityFromRecordID(RECORDID);
                               END;
                                }
      { 37      ;2   ;Action    ;
                      Name=CRMSynchronizeNow;
                      AccessByPermission=TableData 5331=IM;
                      CaptionML=[ENU=Synchronize Now;
                                 ENG=Synchronise Now];
                      ToolTipML=[ENU=Send or get updated data to or from Dynamics 365 for Sales.;
                                 ENG=Send or get updated data to or from Dynamics 365 for Sales.];
                      ApplicationArea=#Suite;
                      Promoted=Yes;
                      Visible=CRMIntegrationEnabled;
                      Image=Refresh;
                      PromotedCategory=Category7;
                      OnAction=VAR
                                 Customer@1000 : Record 18;
                                 CRMIntegrationManagement@1001 : Codeunit 5330;
                                 CustomerRecordRef@1003 : RecordRef;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(Customer);
                                 Customer.NEXT;

                                 IF Customer.COUNT = 1 THEN
                                   CRMIntegrationManagement.UpdateOneNow(Customer.RECORDID)
                                 ELSE BEGIN
                                   CustomerRecordRef.GETTABLE(Customer);
                                   CRMIntegrationManagement.UpdateMultipleNow(CustomerRecordRef);
                                 END
                               END;
                                }
      { 97      ;2   ;Action    ;
                      Name=UpdateStatisticsInCRM;
                      CaptionML=[ENU=Update Account Statistics;
                                 ENG=Update Account Statistics];
                      ToolTipML=[ENU=Send customer statistics data to Dynamics 365 for Sales to update the Account Statistics FactBox.;
                                 ENG=Send customer statistics data to Dynamics 365 for Sales to update the Account Statistics FactBox.];
                      ApplicationArea=#Suite;
                      Visible=CRMIntegrationEnabled;
                      Enabled=CRMIsCoupledToRecord;
                      Image=UpdateXML;
                      OnAction=VAR
                                 CRMIntegrationManagement@1000 : Codeunit 5330;
                               BEGIN
                                 CRMIntegrationManagement.CreateOrUpdateCRMAccountStatistics(Rec);
                               END;
                                }
      { 31      ;2   ;ActionGroup;
                      Name=Coupling;
                      CaptionML=[@@@=Coupling is a noun;
                                 ENU=Coupling;
                                 ENG=Coupling];
                      ToolTipML=[ENU=Create, change, or delete a coupling between the Business Central record and a Dynamics 365 for Sales record.;
                                 ENG=Create, change, or delete a coupling between the Business Central record and a Dynamics 365 for Sales record.];
                      Image=LinkAccount }
      { 49      ;3   ;Action    ;
                      Name=ManageCRMCoupling;
                      AccessByPermission=TableData 5331=IM;
                      CaptionML=[ENU=Set Up Coupling;
                                 ENG=Set Up Coupling];
                      ToolTipML=[ENU=Create or modify the coupling to a Dynamics 365 for Sales account.;
                                 ENG=Create or modify the coupling to a Dynamics 365 for Sales account.];
                      ApplicationArea=#Suite;
                      Promoted=Yes;
                      Visible=CRMIntegrationEnabled;
                      Image=LinkAccount;
                      PromotedCategory=Category7;
                      OnAction=VAR
                                 CRMIntegrationManagement@1000 : Codeunit 5330;
                               BEGIN
                                 CRMIntegrationManagement.DefineCoupling(RECORDID);
                               END;
                                }
      { 47      ;3   ;Action    ;
                      Name=DeleteCRMCoupling;
                      AccessByPermission=TableData 5331=IM;
                      CaptionML=[ENU=Delete Coupling;
                                 ENG=Delete Coupling];
                      ToolTipML=[ENU=Delete the coupling to a Dynamics 365 for Sales account.;
                                 ENG=Delete the coupling to a Dynamics 365 for Sales account.];
                      ApplicationArea=#Suite;
                      Visible=CRMIntegrationEnabled;
                      Enabled=CRMIsCoupledToRecord;
                      Image=UnLinkAccount;
                      OnAction=VAR
                                 CRMCouplingManagement@1000 : Codeunit 5331;
                               BEGIN
                                 CRMCouplingManagement.RemoveCoupling(RECORDID);
                               END;
                                }
      { 53      ;2   ;ActionGroup;
                      Name=Create;
                      CaptionML=[ENU=Create;
                                 ENG=Create];
                      Image=NewCustomer }
      { 57      ;3   ;Action    ;
                      Name=CreateInCRM;
                      CaptionML=[ENU=Create Account in Dynamics 365 for Sales;
                                 ENG=Create Account in Dynamics 365 for Sales];
                      ToolTipML=[ENU=Generate the account in the coupled Dynamics 365 for Sales account.;
                                 ENG=Generate the account in the coupled Dynamics 365 for Sales account.];
                      ApplicationArea=#Suite;
                      Visible=CRMIntegrationEnabled;
                      Image=NewCustomer;
                      OnAction=VAR
                                 Customer@1001 : Record 18;
                                 CRMIntegrationManagement@1000 : Codeunit 5330;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(Customer);
                                 CRMIntegrationManagement.CreateNewRecordsInCRM(Customer);
                               END;
                                }
      { 17      ;3   ;Action    ;
                      Name=CreateFromCRM;
                      CaptionML=[ENU=Create Customer in Business Central;
                                 ENG=Create Customer in Business Central];
                      ToolTipML=[ENU=Generate the customer in the coupled Dynamics 365 for Sales account.;
                                 ENG=Generate the customer in the coupled Dynamics 365 for Sales account.];
                      ApplicationArea=#Suite;
                      Visible=CRMIntegrationEnabled;
                      Image=NewCustomer;
                      OnAction=VAR
                                 CRMIntegrationManagement@1000 : Codeunit 5330;
                               BEGIN
                                 CRMIntegrationManagement.CreateNewCustomerFromCRM;
                               END;
                                }
      { 86      ;2   ;Action    ;
                      Name=ShowLog;
                      CaptionML=[ENU=Synchronization Log;
                                 ENG=Synchronisation Log];
                      ToolTipML=[ENU=View integration synchronization jobs for the customer table.;
                                 ENG=View integration synchronisation jobs for the customer table.];
                      ApplicationArea=#Suite;
                      Visible=CRMIntegrationEnabled;
                      Image=Log;
                      OnAction=VAR
                                 CRMIntegrationManagement@1000 : Codeunit 5330;
                               BEGIN
                                 CRMIntegrationManagement.ShowLog(RECORDID);
                               END;
                                }
      { 9       ;1   ;ActionGroup;
                      CaptionML=[ENU=History;
                                 ENG=History];
                      Image=History }
      { 22      ;2   ;Action    ;
                      Name=CustomerLedgerEntries;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=Ledger E&ntries;
                                 ENG=Ledger E&ntries];
                      ToolTipML=[ENU=View the history of transactions that have been posted for the selected record.;
                                 ENG=View the history of transactions that have been posted for the selected record.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 25;
                      RunPageView=SORTING(Customer No.)
                                  ORDER(Descending);
                      RunPageLink=Customer No.=FIELD(No.);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=CustomerLedger;
                      PromotedCategory=Category7 }
      { 18      ;2   ;Action    ;
                      ShortCutKey=F7;
                      CaptionML=[ENU=Statistics;
                                 ENG=Statistics];
                      ToolTipML=[ENU=View statistical information, such as the value of posted entries, for the record.;
                                 ENG=View statistical information, such as the value of posted entries, for the record.];
                      ApplicationArea=#Suite;
                      RunObject=Page 151;
                      RunPageLink=No.=FIELD(No.),
                                  Date Filter=FIELD(Date Filter),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Statistics;
                      PromotedCategory=Category7 }
      { 21      ;2   ;Action    ;
                      CaptionML=[ENU=S&ales;
                                 ENG=S&ales];
                      ToolTipML=[ENU=Shows a summary of customer ledger entries. You select the time interval in the View by field. The Period column on the left contains a series of dates that are determined by the time interval you have selected.;
                                 ENG=Shows a summary of customer ledger entries. You select the time interval in the View by field. The Period column on the left contains a series of dates that are determined by the time interval you have selected.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 155;
                      RunPageLink=No.=FIELD(No.),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                      Image=Sales }
      { 19      ;2   ;Action    ;
                      CaptionML=[ENU=Entry Statistics;
                                 ENG=Entry Statistics];
                      ToolTipML=[ENU=View entry statistics for the record.;
                                 ENG=View entry statistics for the record.];
                      ApplicationArea=#Suite;
                      RunObject=Page 302;
                      RunPageLink=No.=FIELD(No.),
                                  Date Filter=FIELD(Date Filter),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                      Image=EntryStatistics }
      { 63      ;2   ;Action    ;
                      CaptionML=[ENU=Statistics by C&urrencies;
                                 ENG=Statistics by C&urrencies];
                      ToolTipML=[ENU=View statistics for customers that use multiple currencies.;
                                 ENG=View statistics for customers that use multiple currencies.];
                      ApplicationArea=#Suite;
                      RunObject=Page 486;
                      RunPageLink=Customer Filter=FIELD(No.),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter),
                                  Date Filter=FIELD(Date Filter);
                      Image=Currencies }
      { 6500    ;2   ;Action    ;
                      CaptionML=[ENU=Item &Tracking Entries;
                                 ENG=Item &Tracking Entries];
                      ToolTipML=[ENU=View serial or lot numbers that are assigned to items.;
                                 ENG=View serial or lot numbers that are assigned to items.];
                      ApplicationArea=#ItemTracking;
                      Image=ItemTrackingLedger;
                      OnAction=VAR
                                 ItemTrackingDocMgt@1001 : Codeunit 6503;
                               BEGIN
                                 ItemTrackingDocMgt.ShowItemTrackingForMasterData(1,"No.",'','','','','');
                               END;
                                }
      { 24      ;1   ;ActionGroup;
                      CaptionML=[ENU=S&ales;
                                 ENG=S&ales];
                      Image=Sales }
      { 25      ;2   ;Action    ;
                      Name=Sales_InvoiceDiscounts;
                      CaptionML=[ENU=Invoice &Discounts;
                                 ENG=Invoice &Discounts];
                      ToolTipML=[ENU=Set up different discounts that are applied to invoices for the customer. An invoice discount is automatically granted to the customer when the total on a sales invoice exceeds a certain amount.;
                                 ENG=Set up different discounts that are applied to invoices for the customer. An invoice discount is automatically granted to the customer when the total on a sales invoice exceeds a certain amount.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 23;
                      RunPageLink=Code=FIELD(Invoice Disc. Code);
                      Image=CalculateInvoiceDiscount }
      { 26      ;2   ;Action    ;
                      Name=Sales_Prices;
                      CaptionML=[ENU=Prices;
                                 ENG=Prices];
                      ToolTipML=[ENU=View or set up different prices for items that you sell to the customer. An item price is automatically granted on invoice lines when the specified criteria are met, such as customer, quantity, or ending date.;
                                 ENG=View or set up different prices for items that you sell to the customer. An item price is automatically granted on invoice lines when the specified criteria are met, such as customer, quantity, or ending date.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 7002;
                      RunPageView=SORTING(Sales Type,Sales Code);
                      RunPageLink=Sales Type=CONST(Customer),
                                  Sales Code=FIELD(No.);
                      Image=Price }
      { 71      ;2   ;Action    ;
                      Name=Sales_LineDiscounts;
                      CaptionML=[ENU=Line Discounts;
                                 ENG=Line Discounts];
                      ToolTipML=[ENU=View or set up different discounts for items that you sell to the customer. An item discount is automatically granted on invoice lines when the specified criteria are met, such as customer, quantity, or ending date.;
                                 ENG=View or set up different discounts for items that you sell to the customer. An item discount is automatically granted on invoice lines when the specified criteria are met, such as customer, quantity, or ending date.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 7004;
                      RunPageView=SORTING(Sales Type,Sales Code);
                      RunPageLink=Sales Type=CONST(Customer),
                                  Sales Code=FIELD(No.);
                      Image=LineDiscount }
      { 82      ;2   ;Action    ;
                      CaptionML=[ENU=Prepa&yment Percentages;
                                 ENG=Prepa&yment Percentages];
                      ToolTipML=[ENU="View or edit the percentages of the price that can be paid as a prepayment. ";
                                 ENG="View or edit the percentages of the price that can be paid as a prepayment. "];
                      ApplicationArea=#Prepayments;
                      RunObject=Page 664;
                      RunPageView=SORTING(Sales Type,Sales Code);
                      RunPageLink=Sales Type=CONST(Customer),
                                  Sales Code=FIELD(No.);
                      Image=PrepaymentPercentages }
      { 75      ;2   ;Action    ;
                      CaptionML=[ENU=Recurring Sales Lines;
                                 ENG=Recurring Sales Lines];
                      ToolTipML=[ENU=Set up recurring sales lines for the customer, such as a monthly replenishment order, that can quickly be inserted on a sales document for the customer.;
                                 ENG=Set up recurring sales lines for the customer, such as a monthly replenishment order, that can quickly be inserted on a sales document for the customer.];
                      ApplicationArea=#Suite;
                      RunObject=Page 173;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=CodesList }
      { 11      ;1   ;ActionGroup;
                      CaptionML=[ENU=Documents;
                                 ENG=Documents];
                      Image=Documents }
      { 27      ;2   ;Action    ;
                      CaptionML=[ENU=Quotes;
                                 ENG=Quotes];
                      ToolTipML=[ENU=View a list of ongoing sales quotes.;
                                 ENG=View a list of ongoing sales quotes.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 9300;
                      RunPageView=SORTING(Sell-to Customer No.);
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Promoted=Yes;
                      Image=Quote;
                      PromotedCategory=Category8 }
      { 28      ;2   ;Action    ;
                      CaptionML=[ENU=Orders;
                                 ENG=Orders];
                      ToolTipML=[ENU=View a list of ongoing sales orders for the customer.;
                                 ENG=View a list of ongoing sales orders for the customer.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 9305;
                      RunPageView=SORTING(Sell-to Customer No.);
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Promoted=Yes;
                      Image=Document;
                      PromotedCategory=Category8 }
      { 70      ;2   ;Action    ;
                      CaptionML=[ENU=Return Orders;
                                 ENG=Return Orders];
                      ToolTipML=[ENU=Open the list of ongoing return orders.;
                                 ENG=Open the list of ongoing return orders.];
                      ApplicationArea=#SalesReturnOrder;
                      RunObject=Page 9304;
                      RunPageView=SORTING(Sell-to Customer No.);
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Promoted=Yes;
                      Image=ReturnOrder;
                      PromotedCategory=Category8 }
      { 76      ;2   ;ActionGroup;
                      CaptionML=[ENU=Issued Documents;
                                 ENG=Issued Documents];
                      Image=Documents }
      { 77      ;3   ;Action    ;
                      CaptionML=[ENU=Issued &Reminders;
                                 ENG=Issued &Reminders];
                      ToolTipML=[ENU=View the reminders that you have sent to the customer.;
                                 ENG=View the reminders that you have sent to the customer.];
                      ApplicationArea=#Suite;
                      RunObject=Page 440;
                      RunPageView=SORTING(Customer No.,Posting Date);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=OrderReminder }
      { 78      ;3   ;Action    ;
                      CaptionML=[ENU=Issued &Finance Charge Memos;
                                 ENG=Issued &Finance Charge Memos];
                      ToolTipML=[ENU=View the finance charge memos that you have sent to the customer.;
                                 ENG=View the finance charge memos that you have sent to the customer.];
                      ApplicationArea=#Suite;
                      RunObject=Page 452;
                      RunPageView=SORTING(Customer No.,Posting Date);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=FinChargeMemo }
      { 65      ;2   ;Action    ;
                      CaptionML=[ENU=Blanket Orders;
                                 ENG=Blanket Orders];
                      ToolTipML=[ENU=Open the list of ongoing blanket orders.;
                                 ENG=Open the list of ongoing blanket orders.];
                      ApplicationArea=#Suite;
                      RunObject=Page 9303;
                      RunPageView=SORTING(Document Type,Sell-to Customer No.);
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Image=BlanketOrder }
      { 14      ;1   ;ActionGroup;
                      CaptionML=[ENU=Service;
                                 ENG=Service];
                      Image=ServiceItem }
      { 81      ;2   ;Action    ;
                      CaptionML=[ENU=Service Orders;
                                 ENG=Service Orders];
                      ToolTipML=[ENU=Open the list of ongoing service orders.;
                                 ENG=Open the list of ongoing service orders.];
                      ApplicationArea=#Service;
                      RunObject=Page 9318;
                      RunPageView=SORTING(Document Type,Customer No.);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=Document }
      { 68      ;2   ;Action    ;
                      CaptionML=[ENU=Ser&vice Contracts;
                                 ENG=Ser&vice Contracts];
                      ToolTipML=[ENU=Open the list of ongoing service contracts.;
                                 ENG=Open the list of ongoing service contracts.];
                      ApplicationArea=#Service;
                      RunObject=Page 6065;
                      RunPageView=SORTING(Customer No.,Ship-to Code);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=ServiceAgreement }
      { 69      ;2   ;Action    ;
                      CaptionML=[ENU=Service &Items;
                                 ENG=Service &Items];
                      ToolTipML=[ENU=View or edit the service items that are registered for the customer.;
                                 ENG=View or edit the service items that are registered for the customer.];
                      ApplicationArea=#Service;
                      RunObject=Page 5988;
                      RunPageView=SORTING(Customer No.,Ship-to Code,Item No.,Serial No.);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=ServiceItem }
      { 1900000005;0 ;ActionContainer;
                      ActionContainerType=NewDocumentItems }
      { 1902575205;1 ;Action    ;
                      Name=NewSalesBlanketOrder;
                      CaptionML=[ENU=Blanket Sales Order;
                                 ENG=Blanket Sales Order];
                      ToolTipML=[ENU=Create a blanket sales order for the customer.;
                                 ENG=Create a blanket sales order for the customer.];
                      ApplicationArea=#Suite;
                      RunObject=Page 507;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Image=BlanketOrder;
                      RunPageMode=Create }
      { 1900246505;1 ;Action    ;
                      Name=NewSalesQuote;
                      CaptionML=[ENU=Sales Quote;
                                 ENG=Sales Quote];
                      ToolTipML=[ENU=Offer items or services to a customer.;
                                 ENG=Offer items or services to a customer.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 41;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NewSalesQuote;
                      PromotedCategory=Category5;
                      PromotedOnly=Yes;
                      RunPageMode=Create }
      { 1906384905;1 ;Action    ;
                      Name=NewSalesInvoice;
                      CaptionML=[ENU=Sales Invoice;
                                 ENG=Sales Invoice];
                      ToolTipML=[ENU=Create a sales invoice for the customer.;
                                 ENG=Create a sales invoice for the customer.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 43;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NewSalesInvoice;
                      PromotedCategory=Category5;
                      PromotedOnly=Yes;
                      RunPageMode=Create }
      { 1904747105;1 ;Action    ;
                      Name=NewSalesOrder;
                      CaptionML=[ENU=Sales Order;
                                 ENG=Sales Order];
                      ToolTipML=[ENU=Create a sales order for the customer.;
                                 ENG=Create a sales order for the customer.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 42;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Document;
                      PromotedCategory=Category5;
                      PromotedOnly=Yes;
                      RunPageMode=Create }
      { 1902583505;1 ;Action    ;
                      Name=NewSalesCrMemo;
                      CaptionML=[ENU=Sales Credit Memo;
                                 ENG=Sales Credit Memo];
                      ToolTipML=[ENU=Create a new sales credit memo to revert a posted sales invoice.;
                                 ENG=Create a new sales credit memo to revert a posted sales invoice.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 44;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=CreditMemo;
                      PromotedCategory=Category5;
                      PromotedOnly=Yes;
                      RunPageMode=Create }
      { 1905163705;1 ;Action    ;
                      Name=NewSalesReturnOrder;
                      CaptionML=[ENU=Sales Return Order;
                                 ENG=Sales Return Order];
                      ToolTipML=[ENU=Create a new sales return order for items or services.;
                                 ENG=Create a new sales return order for items or services.];
                      ApplicationArea=#SalesReturnOrder;
                      RunObject=Page 6630;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Image=ReturnOrder;
                      RunPageMode=Create }
      { 1905185205;1 ;Action    ;
                      Name=NewServiceQuote;
                      CaptionML=[ENU=Service Quote;
                                 ENG=Service Quote];
                      ToolTipML=[ENU=Create a new service quote for the customer.;
                                 ENG=Create a new service quote for the customer.];
                      ApplicationArea=#Service;
                      RunObject=Page 5964;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=Quote;
                      RunPageMode=Create }
      { 1902079405;1 ;Action    ;
                      Name=NewServiceInvoice;
                      CaptionML=[ENU=Service Invoice;
                                 ENG=Service Invoice];
                      ToolTipML=[ENU=Create a new service invoice for the customer.;
                                 ENG=Create a new service invoice for the customer.];
                      ApplicationArea=#Service;
                      RunObject=Page 5933;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=Invoice;
                      RunPageMode=Create }
      { 1907102005;1 ;Action    ;
                      Name=NewServiceOrder;
                      CaptionML=[ENU=Service Order;
                                 ENG=Service Order];
                      ToolTipML=[ENU=Create a new service order for the customer.;
                                 ENG=Create a new service order for the customer.];
                      ApplicationArea=#Service;
                      RunObject=Page 5900;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=Document;
                      RunPageMode=Create }
      { 1901662105;1 ;Action    ;
                      Name=NewServiceCrMemo;
                      CaptionML=[ENU=Service Credit Memo;
                                 ENG=Service Credit Memo];
                      ToolTipML=[ENU=Create a new service credit memo for the customer.;
                                 ENG=Create a new service credit memo for the customer.];
                      ApplicationArea=#Service;
                      RunObject=Page 5935;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=CreditMemo;
                      RunPageMode=Create }
      { 1903839805;1 ;Action    ;
                      Name=NewReminder;
                      CaptionML=[ENU=Reminder;
                                 ENG=Reminder];
                      ToolTipML=[ENU=Create a new reminder for the customer.;
                                 ENG=Create a new reminder for the customer.];
                      ApplicationArea=#Suite;
                      RunObject=Page 434;
                      RunPageLink=Customer No.=FIELD(No.);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Reminder;
                      PromotedCategory=Category5;
                      RunPageMode=Create }
      { 1901102005;1 ;Action    ;
                      Name=NewFinChargeMemo;
                      CaptionML=[ENU=Finance Charge Memo;
                                 ENG=Finance Charge Memo];
                      ToolTipML=[ENU=Create a new finance charge memo.;
                                 ENG=Create a new finance charge memo.];
                      ApplicationArea=#Suite;
                      RunObject=Page 446;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=FinChargeMemo;
                      RunPageMode=Create }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 104     ;1   ;ActionGroup;
                      CaptionML=[ENU=History;
                                 ENG=History];
                      Image=History }
      { 103     ;2   ;Action    ;
                      Name=CustomerLedgerEntriesHistory;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=Ledger E&ntries;
                                 ENG=Ledger E&ntries];
                      ToolTipML=[ENU=View the history of transactions that have been posted for the selected record.;
                                 ENG=View the history of transactions that have been posted for the selected record.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 25;
                      RunPageView=SORTING(Customer No.);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=CustomerLedger;
                      Scope=Repeater }
      { 102     ;1   ;ActionGroup;
                      Name=PricesAndDiscounts;
                      CaptionML=[ENU=Prices and Discounts;
                                 ENG=Prices and Discounts] }
      { 101     ;2   ;Action    ;
                      Name=Prices_InvoiceDiscounts;
                      CaptionML=[ENU=Invoice &Discounts;
                                 ENG=Invoice &Discounts];
                      ToolTipML=[ENU=Set up different discounts applied to invoices for the selected customer. An invoice discount is automatically granted to the customer when the total on a sales invoice exceeds a certain amount.;
                                 ENG=Set up different discounts applied to invoices for the selected customer. An invoice discount is automatically granted to the customer when the total on a sales invoice exceeds a certain amount.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 23;
                      RunPageLink=Code=FIELD(Invoice Disc. Code);
                      Image=CalculateInvoiceDiscount;
                      Scope=Repeater }
      { 100     ;2   ;Action    ;
                      Name=Prices_Prices;
                      CaptionML=[ENU=Prices;
                                 ENG=Prices];
                      ToolTipML=[ENU=View or set up different prices for items that you sell to the selected customer. An item price is automatically granted on invoice lines when the specified criteria are met, such as customer, quantity, or ending date.;
                                 ENG=View or set up different prices for items that you sell to the selected customer. An item price is automatically granted on invoice lines when the specified criteria are met, such as customer, quantity, or ending date.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 7002;
                      RunPageView=SORTING(Sales Type,Sales Code);
                      RunPageLink=Sales Type=CONST(Customer),
                                  Sales Code=FIELD(No.);
                      Image=Price;
                      Scope=Repeater }
      { 98      ;2   ;Action    ;
                      Name=Prices_LineDiscounts;
                      CaptionML=[ENU=Line Discounts;
                                 ENG=Line Discounts];
                      ToolTipML=[ENU=View or set up different discounts for items that you sell to the customer. An item discount is automatically granted on invoice lines when the specified criteria are met, such as customer, quantity, or ending date.;
                                 ENG=View or set up different discounts for items that you sell to the customer. An item discount is automatically granted on invoice lines when the specified criteria are met, such as customer, quantity, or ending date.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 7004;
                      RunPageView=SORTING(Sales Type,Sales Code);
                      RunPageLink=Sales Type=CONST(Customer),
                                  Sales Code=FIELD(No.);
                      Image=LineDiscount;
                      Scope=Repeater }
      { 55      ;1   ;ActionGroup;
                      CaptionML=[ENU=Request Approval;
                                 ENG=Request Approval];
                      Image=SendApprovalRequest }
      { 51      ;2   ;Action    ;
                      Name=SendApprovalRequest;
                      CaptionML=[ENU=Send A&pproval Request;
                                 ENG=Send A&pproval Request];
                      ToolTipML=[ENU=Request approval to change the record.;
                                 ENG=Request approval to change the record.];
                      ApplicationArea=#Suite;
                      Enabled=(NOT OpenApprovalEntriesExist) AND EnabledApprovalWorkflowsExist AND CanRequestApprovalForFlow;
                      Image=SendApprovalRequest;
                      OnAction=VAR
                                 ApprovalsMgmt@1001 : Codeunit 1535;
                               BEGIN
                                 IF ApprovalsMgmt.CheckCustomerApprovalsWorkflowEnabled(Rec) THEN
                                   ApprovalsMgmt.OnSendCustomerForApproval(Rec);
                               END;
                                }
      { 39      ;2   ;Action    ;
                      Name=CancelApprovalRequest;
                      CaptionML=[ENU=Cancel Approval Re&quest;
                                 ENG=Cancel Approval Re&quest];
                      ToolTipML=[ENU=Cancel the approval request.;
                                 ENG=Cancel the approval request.];
                      ApplicationArea=#Suite;
                      Enabled=CanCancelApprovalForRecord OR CanCancelApprovalForFlow;
                      Image=CancelApprovalRequest;
                      OnAction=VAR
                                 ApprovalsMgmt@1001 : Codeunit 1535;
                                 WorkflowWebhookManagement@1000 : Codeunit 1543;
                               BEGIN
                                 ApprovalsMgmt.OnCancelCustomerApprovalRequest(Rec);
                                 WorkflowWebhookManagement.FindAndCancel(RECORDID);
                               END;
                                }
      { 85      ;1   ;ActionGroup;
                      CaptionML=[ENU=Workflow;
                                 ENG=Workflow] }
      { 15      ;2   ;Action    ;
                      Name=CreateApprovalWorkflow;
                      CaptionML=[ENU=Create Approval Workflow;
                                 ENG=Create Approval Workflow];
                      ToolTipML=[ENU=Set up an approval workflow for creating or changing customers, by going through a few pages that will guide you.;
                                 ENG=Set up an approval workflow for creating or changing customers, by going through a few pages that will guide you.];
                      ApplicationArea=#Suite;
                      Enabled=NOT EnabledApprovalWorkflowsExist;
                      Image=CreateWorkflow;
                      OnAction=BEGIN
                                 PAGE.RUNMODAL(PAGE::"Cust. Approval WF Setup Wizard");
                                 SetWorkflowManagementEnabledState;
                               END;
                                }
      { 13      ;2   ;Action    ;
                      Name=ManageApprovalWorkflows;
                      CaptionML=[ENU=Manage Approval Workflows;
                                 ENG=Manage Approval Workflows];
                      ToolTipML=[ENU=View or edit existing approval workflows for creating or changing customers.;
                                 ENG=View or edit existing approval workflows for creating or changing customers.];
                      ApplicationArea=#Suite;
                      Enabled=EnabledApprovalWorkflowsExist;
                      Image=WorkflowSetup;
                      OnAction=VAR
                                 WorkflowManagement@1000 : Codeunit 1501;
                               BEGIN
                                 WorkflowManagement.NavigateToWorkflows(DATABASE::Customer,EventFilter);
                                 SetWorkflowManagementEnabledState;
                               END;
                                }
      { 1900839804;1 ;Action    ;
                      CaptionML=[ENU=Cash Receipt Journal;
                                 ENG=Cash Receipt Journal];
                      ToolTipML=[ENU=Open the cash receipt journal to post incoming payments.;
                                 ENG=Open the cash receipt journal to post incoming payments.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 255;
                      Promoted=Yes;
                      Image=CashReceiptJournal;
                      PromotedCategory=Category8 }
      { 1905171704;1 ;Action    ;
                      CaptionML=[ENU=Sales Journal;
                                 ENG=Sales Journal];
                      ToolTipML=[ENU=Post any sales transaction for the customer.;
                                 ENG=Post any sales transaction for the customer.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 253;
                      Promoted=Yes;
                      Image=Journals;
                      PromotedCategory=Category8 }
      { 108     ;1   ;Action    ;
                      Name=ApplyTemplate;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Apply Template;
                                 ENG=Apply Template];
                      ToolTipML=[ENU=Apply a template to update one or more entities with your standard settings for a certain type of entity.;
                                 ENG=Apply a template to update one or more entities with your standard settings for a certain type of entity.];
                      ApplicationArea=#Basic,#Suite;
                      Image=ApplyTemplate;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 Customer@1001 : Record 18;
                                 MiniCustomerTemplate@1000 : Record 1300;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(Customer);
                                 MiniCustomerTemplate.UpdateCustomersFromTemplate(Customer);
                               END;
                                }
      { 107     ;1   ;Action    ;
                      Name=PaymentRegistration;
                      CaptionML=[ENU=Register Customer Payments;
                                 ENG=Register Customer Payments];
                      ToolTipML=[ENU=Process your customer payments by matching amounts received on your bank account with the related unpaid sales invoices, and then post the payments.;
                                 ENG=Process your customer payments by matching amounts received on your bank account with the related unpaid sales invoices, and then post the payments.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 981;
                      RunPageLink=Source No.=FIELD(No.);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Payment;
                      PromotedCategory=Process;
                      PromotedOnly=Yes }
      { 105     ;1   ;ActionGroup;
                      CaptionML=[ENU=Display;
                                 ENG=Display] }
      { 106     ;2   ;Action    ;
                      Name=ReportFactBoxVisibility;
                      CaptionML=[ENU=Show/Hide Power BI Reports;
                                 ENG=Show/Hide Power BI Reports];
                      ToolTipML=[ENU=Select if the Power BI FactBox is visible or not.;
                                 ENG=Select if the Power BI FactBox is visible or not.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Report;
                      OnAction=BEGIN
                                 CurrPage."Power BI Report FactBox".PAGE.SetFactBoxVisibility(PowerBIVisible);
                               END;
                                }
      { 1900000006;0 ;ActionContainer;
                      ActionContainerType=Reports }
      { 96      ;1   ;ActionGroup;
                      Name=Reports;
                      CaptionML=[ENU=Reports;
                                 ENG=Reports] }
      { 95      ;2   ;ActionGroup;
                      Name=SalesReports;
                      CaptionML=[ENU=Sales Reports;
                                 ENG=Sales Reports];
                      Image=Report }
      { 94      ;3   ;Action    ;
                      Name=ReportCustomerTop10List;
                      CaptionML=[ENU=Customer - Top 10 List;
                                 ENG=Customer - Top 10 List];
                      ToolTipML=[ENU=View which customers purchase the most or owe the most in a selected period. Only customers that have either purchases during the period or a balance at the end of the period will be included.;
                                 ENG=View which customers purchase the most or owe the most in a selected period. Only customers that have either purchases during the period or a balance at the end of the period will be included.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 111;
                      Image=Report }
      { 93      ;3   ;Action    ;
                      Name=ReportCustomerSalesList;
                      CaptionML=[ENU=Customer - Sales List;
                                 ENG=Customer - Sales List];
                      ToolTipML=[ENU=View customer sales for a period, for example, to report sales activity to customs and tax authorities. You can choose to include only customers with total sales that exceed a minimum amount. You can also specify whether you want the report to show address details for each customer.;
                                 ENG=View customer sales for a period, for example, to report sales activity to customs and tax authorities. You can choose to include only customers with total sales that exceed a minimum amount. You can also specify whether you want the report to show address details for each customer.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 119;
                      Image=Report }
      { 92      ;3   ;Action    ;
                      Name=ReportSalesStatistics;
                      CaptionML=[ENU=Sales Statistics;
                                 ENG=Sales Statistics];
                      ToolTipML=[ENU=View customers' total costs, sales, and profits over time, for example, to analyze earnings trends. The report shows amounts for original and adjusted costs, sales, profits, invoice discounts, payment discounts, and profit percentage in three adjustable periods.;
                                 ENG=View customers' total costs, sales, and profits over time, for example, to analyse earnings trends. The report shows amounts for original and adjusted costs, sales, profits, invoice discounts, payment discounts, and profit percentage in three adjustable periods.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 112;
                      Image=Report }
      { 91      ;2   ;ActionGroup;
                      Name=FinanceReports;
                      CaptionML=[ENU=Finance Reports;
                                 ENG=Finance Reports];
                      Image=Report }
      { 90      ;3   ;Action    ;
                      Name=Statement;
                      CaptionML=[ENU=Statement;
                                 ENG=Statement];
                      ToolTipML=[ENU=View a list of a customer's transactions for a selected period, for example, to send to the customer at the close of an accounting period. You can choose to have all overdue balances displayed regardless of the period specified, or you can choose to include an aging band.;
                                 ENG=View a list of a customer's transactions for a selected period, for example, to send to the customer at the close of an accounting period. You can choose to have all overdue balances displayed regardless of the period specified, or you can choose to include an ageing band.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 153;
                      Image=Report }
      { 194     ;3   ;Action    ;
                      Name=BackgroundStatement;
                      CaptionML=[ENU=Scheduled Statements;
                                 ENG=Scheduled Statements];
                      ToolTipML=[ENU=Schedule Customer Statements in the Job Queue.;
                                 ENG=Schedule Customer Statements in the Job Queue.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Report;
                      OnAction=VAR
                                 CustomerLayoutStatement@1170 : Codeunit 8810;
                               BEGIN
                                 CustomerLayoutStatement.EnqueueReport;
                               END;
                                }
      { 89      ;3   ;Action    ;
                      Name=ReportCustomerBalanceToDate;
                      CaptionML=[ENU=Customer - Balance to Date;
                                 ENG=Customer - Balance to Date];
                      ToolTipML=[ENU=View a list with customers' payment history up until a certain date. You can use the report to extract your total sales income at the close of an accounting period or fiscal year.;
                                 ENG=View a list with customers' payment history up until a certain date. You can use the report to extract your total sales income at the close of an accounting period or fiscal year.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 121;
                      Image=Report }
      { 88      ;3   ;Action    ;
                      Name=ReportCustomerTrialBalance;
                      CaptionML=[ENU=Customer - Trial Balance;
                                 ENG=Customer - Trial Balance];
                      ToolTipML=[ENU=View the beginning and ending balance for customers with entries within a specified period. The report can be used to verify that the balance for a customer posting group is equal to the balance on the corresponding general ledger account on a certain date.;
                                 ENG=View the beginning and ending balance for customers with entries within a specified period. The report can be used to verify that the balance for a customer posting group is equal to the balance on the corresponding general ledger account on a certain date.];
                      ApplicationArea=#Suite;
                      RunObject=Report 129;
                      Image=Report }
      { 87      ;3   ;Action    ;
                      Name=ReportCustomerDetailTrial;
                      CaptionML=[ENU=Customer - Detail Trial Bal.;
                                 ENG=Customer - Detail Trial Bal.];
                      ToolTipML=[ENU=View the balance for customers with balances on a specified date. The report can be used at the close of an accounting period, for example, or for an audit.;
                                 ENG=View the balance for customers with balances on a specified date. The report can be used at the close of an accounting period, for example, or for an audit.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 104;
                      Image=Report }
      { 83      ;3   ;Action    ;
                      Name=ReportCustomerSummaryAging;
                      CaptionML=[ENU=Customer - Summary Aging;
                                 ENG=Customer - Summary Ageing];
                      ToolTipML=[ENU=View, print, or save a summary of each customer's total payments due, divided into three time periods. The report can be used to decide when to issue reminders, to evaluate a customer's creditworthiness, or to prepare liquidity analyses.;
                                 ENG=View, print, or save a summary of each customer's total payments due, divided into three time periods. The report can be used to decide when to issue reminders, to evaluate a customer's creditworthiness, or to prepare liquidity analyses.];
                      ApplicationArea=#Suite;
                      RunObject=Report 105;
                      Image=Report }
      { 80      ;3   ;Action    ;
                      Name=ReportCustomerDetailedAging;
                      CaptionML=[ENU=Customer - Detailed Aging;
                                 ENG=Customer - Detailed Ageing];
                      ToolTipML=[ENU=View, print, or save a detailed list of each customer's total payments due, divided into three time periods. The report can be used to decide when to issue reminders, to evaluate a customer's creditworthiness, or to prepare liquidity analyses.;
                                 ENG=View, print, or save a detailed list of each customer's total payments due, divided into three time periods. The report can be used to decide when to issue reminders, to evaluate a customer's creditworthiness, or to prepare liquidity analyses.];
                      ApplicationArea=#Suite;
                      RunObject=Report 106;
                      Image=Report }
      { 74      ;3   ;Action    ;
                      Name=ReportAgedAccountsReceivable;
                      CaptionML=[ENU=Aged Accounts Receivable;
                                 ENG=Aged Accounts Receivable];
                      ToolTipML=[ENU=View an overview of when customer payments are due or overdue, divided into four periods. You must specify the date you want aging calculated from and the length of the period that each column will contain data for.;
                                 ENG=View an overview of when customer payments are due or overdue, divided into four periods. You must specify the date you want ageing calculated from and the length of the period that each column will contain data for.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 120;
                      Image=Report }
      { 73      ;3   ;Action    ;
                      Name=ReportCustomerPaymentReceipt;
                      CaptionML=[ENU=Customer - Payment Receipt;
                                 ENG=Customer - Payment Receipt];
                      ToolTipML=[ENU=View a document showing which customer ledger entries that a payment has been applied to. This report can be used as a payment receipt that you send to the customer.;
                                 ENG=View a document showing which customer ledger entries that a payment has been applied to. This report can be used as a payment receipt that you send to the customer.];
                      ApplicationArea=#Suite;
                      RunObject=Report 211;
                      Image=Report }
      { 1903839806;2 ;Action    ;
                      CaptionML=[ENU=Reminder;
                                 ENG=Reminder];
                      ToolTipML=[ENU=Create a new reminder for the customer.;
                                 ENG=Create a new reminder for the customer.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 117;
                      Image=Reminder }
      { 3       ;1   ;ActionGroup;
                      CaptionML=[ENU=General;
                                 ENG=General] }
      { 1905562606;2 ;Action    ;
                      CaptionML=[ENU=Customer List;
                                 ENG=Customer List];
                      ToolTipML=[ENU=View various kinds of basic information for customers, such as customer posting group, discount group, finance charge and payment information, salesperson, the customer's default currency and credit limit (in LCY), and the customer's current balance (in LCY).;
                                 ENG=View various kinds of basic information for customers, such as customer posting group, discount group, finance charge and payment information, salesperson, the customer's default currency and credit limit (in LCY), and the customer's current balance (in LCY).];
                      ApplicationArea=#Suite;
                      RunObject=Report 101;
                      Image=Report }
      { 1901007206;2 ;Action    ;
                      CaptionML=[ENU=Customer Register;
                                 ENG=Customer Register];
                      ToolTipML=[ENU=View posted customer ledger entries divided into, and sorted according to, registers. By using a filter, you can select exactly the entries in the registers that you need to see. If you have created many entries and you do not set a filter, the report will print a large amount of information.;
                                 ENG=View posted customer ledger entries divided into, and sorted according to, registers. By using a filter, you can select exactly the entries in the registers that you need to see. If you have created many entries and you do not set a filter, the report will print a large amount of information.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 103;
                      Image=Report }
      { 1907152806;2 ;Action    ;
                      CaptionML=[ENU=Customer - Top 10 List;
                                 ENG=Customer - Top 10 List];
                      ToolTipML=[ENU=View which customers purchase the most or owe the most in a selected period. Only customers that have either purchases during the period or a balance at the end of the period will be included.;
                                 ENG=View which customers purchase the most or owe the most in a selected period. Only customers that have either purchases during the period or a balance at the end of the period will be included.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 111;
                      Image=Report }
      { 5       ;1   ;ActionGroup;
                      CaptionML=[ENU=Sales;
                                 ENG=Sales];
                      Image=Sales }
      { 1905727106;2 ;Action    ;
                      CaptionML=[ENU=Customer - Order Summary;
                                 ENG=Customer - Order Summary];
                      ToolTipML=[ENU=View the order detail (the quantity not yet shipped) for each customer in three periods of 30 days each, starting from a selected date. There are also columns with orders to be shipped before and after the three periods and a column with the total order detail for each customer. The report can be used to analyze a company's expected sales volume.;
                                 ENG=View the order detail (the quantity not yet shipped) for each customer in three periods of 30 days each, starting from a selected date. There are also columns with orders to be shipped before and after the three periods and a column with the total order detail for each customer. The report can be used to analyse a company's expected sales volume.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 107;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
      { 1900172506;2 ;Action    ;
                      CaptionML=[ENU=Customer - Order Detail;
                                 ENG=Customer - Order Detail];
                      ToolTipML=[ENU=View a list of orders divided by customer. The order amounts are totaled for each customer and for the entire list. The report can be used, for example, to obtain an overview of sales over the short term or to analyze possible shipment problems.;
                                 ENG=View a list of orders divided by customer. The order amounts are totalled for each customer and for the entire list. The report can be used, for example, to obtain an overview of sales over the short term or to analyse possible shipment problems.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 108;
                      Image=Report }
      { 1906073506;2 ;Action    ;
                      CaptionML=[ENU=Customer - Sales List;
                                 ENG=Customer - Sales List];
                      ToolTipML=[ENU=View customer sales for a period, for example, to report sales activity to customs and tax authorities. You can choose to include only customers with total sales that exceed a minimum amount. You can also specify whether you want the report to show address details for each customer.;
                                 ENG=View customer sales for a period, for example, to report sales activity to customs and tax authorities. You can choose to include only customers with total sales that exceed a minimum amount. You can also specify whether you want the report to show address details for each customer.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 119;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
      { 1904190506;2 ;Action    ;
                      CaptionML=[ENU=Sales Statistics;
                                 ENG=Sales Statistics];
                      ToolTipML=[ENU=View customers' total costs, sales, and profits over time, for example, to analyze earnings trends. The report shows amounts for original and adjusted costs, sales, profits, invoice discounts, payment discounts, and profit percentage in three adjustable periods.;
                                 ENG=View customers' total costs, sales, and profits over time, for example, to analyse earnings trends. The report shows amounts for original and adjusted costs, sales, profits, invoice discounts, payment discounts, and profit percentage in three adjustable periods.];
                      ApplicationArea=#Suite;
                      RunObject=Report 112;
                      Image=Report }
      { 1900760706;2 ;Action    ;
                      CaptionML=[ENU=Customer/Item Sales;
                                 ENG=Customer/Item Sales];
                      ToolTipML=[ENU=View a list of item sales for each customer during a selected time period. The report contains information on quantity, sales amount, profit, and possible discounts. It can be used, for example, to analyze a company's customer groups.;
                                 ENG=View a list of item sales for each customer during a selected time period. The report contains information on quantity, sales amount, profit, and possible discounts. It can be used, for example, to analyse a company's customer groups.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 113;
                      Image=Report }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the involved entry or record, according to the specified number series.;
                           ENG=Specifies the number of the involved entry or record, according to the specified number series.];
                ApplicationArea=#All;
                SourceExpr="No." }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer's name. This name will appear on all sales documents for the customer. You can enter a maximum of 50 characters, both numbers and letters.;
                           ENG=Specifies the customer's name. This name will appear on all sales documents for the customer. You can enter a maximum of 50 characters, both numbers and letters.];
                ApplicationArea=#All;
                SourceExpr=Name }

    { 1240060001;2;Field  ;
                SourceExpr=Shop }

    { 40  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the responsibility center, such as a distribution hub, that is associated with the involved user, company, customer, or vendor.;
                           ENG=Specifies the code of the responsibility centre, such as a distribution hub, that is associated with the involved user, company, customer, or vendor.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Responsibility Center" }

    { 43  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies from which location sales to this customer will be processed by default.;
                           ENG=Specifies from which location sales to this customer will be processed by default.];
                ApplicationArea=#Location;
                SourceExpr="Location Code" }

    { 54  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the postal code.;
                           ENG=Specifies the postcode.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Post Code";
                Visible=FALSE }

    { 30  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the country/region of the address.;
                           ENG=Specifies the country/region of the address.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Country/Region Code";
                Visible=FALSE }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer's telephone number.;
                           ENG=Specifies the customer's telephone number.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Phone No." }

    { 79  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer's intercompany partner code.;
                           ENG=Specifies the customer's intercompany partner code.];
                ApplicationArea=#Intercompany;
                SourceExpr="IC Partner Code";
                Visible=FALSE }

    { 34  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the name of the person you regularly contact when you do business with this customer.;
                           ENG=Specifies the name of the person you regularly contact when you do business with this customer.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Contact }

    { 36  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a code for the salesperson who normally handles this customer's account.;
                           ENG=Specifies a code for the salesperson who normally handles this customer's account.];
                ApplicationArea=#Suite;
                SourceExpr="Salesperson Code";
                Visible=FALSE }

    { 38  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer's market type to link business transactions to.;
                           ENG=Specifies the customer's market type to link business transactions to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Customer Posting Group";
                Visible=FALSE }

    { 56  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer's trade type to link transactions made for this customer with the appropriate general ledger account according to the general posting setup.;
                           ENG=Specifies the customer's trade type to link transactions made for this customer with the appropriate general ledger account according to the general posting setup.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Gen. Bus. Posting Group";
                Visible=FALSE }

    { 52  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the VAT specification of the involved customer or vendor to link transactions made for this record with the appropriate general ledger account according to the VAT posting setup.;
                           ENG=Specifies the VAT specification of the involved customer or vendor to link transactions made for this record with the appropriate general ledger account according to the VAT posting setup.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="VAT Bus. Posting Group";
                Visible=FALSE }

    { 46  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer price group code, which you can use to set up special sales prices in the Sales Prices window.;
                           ENG=Specifies the customer price group code, which you can use to set up special sales prices in the Sales Prices window.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Customer Price Group";
                Visible=FALSE }

    { 72  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer discount group code, which you can use as a criterion to set up special discounts in the Sales Line Discounts window.;
                           ENG=Specifies the customer discount group code, which you can use as a criterion to set up special discounts in the Sales Line Discounts window.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Customer Disc. Group";
                Visible=FALSE }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a formula that calculates the payment due date, payment discount date, and payment discount amount.;
                           ENG=Specifies a formula that calculates the payment due date, payment discount date, and payment discount amount.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Payment Terms Code";
                Visible=FALSE }

    { 61  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies how reminders about late payments are handled for this customer.;
                           ENG=Specifies how reminders about late payments are handled for this customer.];
                ApplicationArea=#Suite;
                SourceExpr="Reminder Terms Code";
                Visible=FALSE }

    { 48  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the involved finance charges in case of late payment.;
                           ENG=Specifies the code for the involved finance charges in case of late payment.];
                ApplicationArea=#Suite;
                SourceExpr="Fin. Charge Terms Code";
                Visible=FALSE }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the default currency for the customer.;
                           ENG=Specifies the default currency for the customer.];
                ApplicationArea=#Suite;
                SourceExpr="Currency Code";
                Visible=FALSE }

    { 50  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the language that is used when translating specified text on documents to foreign business partner, such as an item description on an order confirmation.;
                           ENG=Specifies the language that is used when translating specified text on documents to foreign business partner, such as an item description on an order confirmation.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Language Code";
                Visible=FALSE }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies an alternate name that you can use to search for the record in question when you cannot remember the value in the Name field.;
                           ENG=Specifies an alternate name that you can use to search for the record in question when you cannot remember the value in the Name field.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Search Name";
                Visible=FALSE }

    { 1102601000;2;Field  ;
                ToolTipML=[ENU=Specifies the maximum amount you allow the customer to exceed the payment balance before warnings are issued.;
                           ENG=Specifies the maximum amount you allow the customer to exceed the payment balance before warnings are issued.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Credit Limit (LCY)";
                Visible=FALSE }

    { 1102601002;2;Field  ;
                ToolTipML=[ENU=Specifies that the related record is blocked from being posted in transactions, for example a customer that is declared insolvent or an item that is placed in quarantine.;
                           ENG=Specifies that the related record is blocked from being posted in transactions, for example a customer that is declared insolvent or an item that is placed in quarantine.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Blocked;
                Visible=FALSE }

    { 200 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies whether to limit access to data for the data subject during daily operations. This is useful, for example, when protecting data from changes while it is under privacy review.;
                           ENG=Specifies whether to limit access to data for the data subject during daily operations. This is useful, for example, when protecting data from changes while it is under privacy review.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Privacy Blocked";
                Visible=FALSE }

    { 1102601004;2;Field  ;
                ToolTipML=[ENU=Specifies when the customer card was last modified.;
                           ENG=Specifies when the customer card was last modified.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Last Date Modified";
                Visible=FALSE }

    { 1102601006;2;Field  ;
                ToolTipML=[ENU=Specifies how to apply payments to entries for this customer.;
                           ENG=Specifies how to apply payments to entries for this customer.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Application Method";
                Visible=FALSE }

    { 1102601008;2;Field  ;
                ToolTipML=[ENU=Specifies if several orders delivered to the customer can appear on the same sales invoice.;
                           ENG=Specifies if several orders delivered to the customer can appear on the same sales invoice.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Combine Shipments";
                Visible=FALSE }

    { 1102601010;2;Field  ;
                ToolTipML=[ENU=Specifies whether items will never, automatically (Always), or optionally be reserved for this customer. Optional means that you must manually reserve items for this customer.;
                           ENG=Specifies whether items will never, automatically (Always), or optionally be reserved for this customer. Optional means that you must manually reserve items for this customer.];
                ApplicationArea=#Reservation;
                SourceExpr=Reserve;
                Visible=FALSE }

    { 7   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for another shipment address than the customer's own address, which is entered by default.;
                           ENG=Specifies the code for another shipment address than the customer's own address, which is entered by default.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ship-to Code";
                Visible=FALSE }

    { 1102601012;2;Field  ;
                ToolTipML=[ENU=Specifies if the customer accepts partial shipment of orders.;
                           ENG=Specifies if the customer accepts partial shipment of orders.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Shipping Advice";
                Visible=FALSE }

    { 1102601014;2;Field  ;
                ToolTipML=[ENU=Specifies the code for the shipping agent who is transporting the items.;
                           ENG=Specifies the code for the shipping agent who is transporting the items.];
                ApplicationArea=#Suite;
                SourceExpr="Shipping Agent Code";
                Visible=FALSE }

    { 1102601016;2;Field  ;
                ToolTipML=[ENU=Specifies a customizable calendar for shipment planning that holds the customer's working days and holidays.;
                           ENG=Specifies a customisable calendar for shipment planning that holds the customer's working days and holidays.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Base Calendar Code";
                Visible=FALSE }

    { 62  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the payment amount that the customer owes for completed sales. This value is also known as the customer's balance.;
                           ENG=Specifies the payment amount that the customer owes for completed sales. This value is also known as the customer's balance.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Balance (LCY)";
                OnDrillDown=BEGIN
                              OpenCustomerLedgerEntries(FALSE);
                            END;
                             }

    { 59  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies payments from the customer that are overdue per today's date.;
                           ENG=Specifies payments from the customer that are overdue per today's date.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Balance Due (LCY)";
                OnDrillDown=BEGIN
                              OpenCustomerLedgerEntries(TRUE);
                            END;
                             }

    { 32  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total net amount of sales to the customer in LCY.;
                           ENG=Specifies the total net amount of sales to the customer in LCY.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sales (LCY)" }

    { 109 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the sum of payments received from the customer.;
                           ENG=Specifies the sum of payments received from the customer.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Payments (LCY)" }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 861 ;1   ;Part      ;
                Name=Power BI Report FactBox;
                CaptionML=[ENU=Power BI Reports;
                           ENG=Power BI Reports];
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page6306;
                Visible=PowerBIVisible;
                PartType=Page }

    { 99  ;1   ;Part      ;
                ApplicationArea=#All;
                SubPageLink=No.=FIELD(No.);
                PagePartID=Page5360;
                Visible=CRMIsCoupledToRecord;
                PartType=Page }

    { 35  ;1   ;Part      ;
                ApplicationArea=#All;
                SubPageLink=Source Type=CONST(Customer),
                            Source No.=FIELD(No.);
                PagePartID=Page875;
                Visible=SocialListeningVisible;
                PartType=Page }

    { 33  ;1   ;Part      ;
                ApplicationArea=#All;
                SubPageLink=Source Type=CONST(Customer),
                            Source No.=FIELD(No.);
                PagePartID=Page876;
                Visible=SocialListeningSetupVisible;
                PartType=Page;
                UpdatePropagation=Both }

    { 1903720907;1;Part   ;
                Name=SalesHistSelltoFactBox;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9080;
                PartType=Page }

    { 1907234507;1;Part   ;
                Name=SalesHistBilltoFactBox;
                ApplicationArea=#All;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9081;
                Visible=FALSE;
                PartType=Page }

    { 1902018507;1;Part   ;
                Name=CustomerStatisticsFactBox;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9082;
                PartType=Page }

    { 1900316107;1;Part   ;
                Name=CustomerDetailsFactBox;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9084;
                Visible=FALSE;
                PartType=Page }

    { 1907829707;1;Part   ;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9085;
                Visible=FALSE;
                PartType=Page }

    { 1902613707;1;Part   ;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9086;
                Visible=FALSE;
                PartType=Page }

    { 1900383207;1;Part   ;
                ApplicationArea=#RecordLinks;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                ApplicationArea=#Notes;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      ApprovalsMgmt@1010 : Codeunit 1535;
      SocialListeningSetupVisible@1009 : Boolean;
      SocialListeningVisible@1008 : Boolean;
      CRMIntegrationEnabled@1007 : Boolean;
      CRMIsCoupledToRecord@1006 : Boolean;
      OpenApprovalEntriesExist@1005 : Boolean;
      CanCancelApprovalForRecord@1004 : Boolean;
      EnabledApprovalWorkflowsExist@1003 : Boolean;
      PowerBIVisible@1002 : Boolean;
      CanRequestApprovalForFlow@1013 : Boolean;
      CanCancelApprovalForFlow@1014 : Boolean;
      EventFilter@1001 : Text;
      CaptionTxt@1012 : Text;

    [External]
    PROCEDURE GetSelectionFilter@2() : Text;
    VAR
      Cust@1001 : Record 18;
      SelectionFilterManagement@1002 : Codeunit 46;
    BEGIN
      CurrPage.SETSELECTIONFILTER(Cust);
      EXIT(SelectionFilterManagement.GetSelectionFilterForCustomer(Cust));
    END;

    [External]
    PROCEDURE SetSelection@1(VAR Cust@1000 : Record 18);
    BEGIN
      CurrPage.SETSELECTIONFILTER(Cust);
    END;

    LOCAL PROCEDURE SetCustomerNoVisibilityOnFactBoxes@5();
    BEGIN
      CurrPage.SalesHistSelltoFactBox.PAGE.SetCustomerNoVisibility(FALSE);
      CurrPage.SalesHistBilltoFactBox.PAGE.SetCustomerNoVisibility(FALSE);
      CurrPage.CustomerDetailsFactBox.PAGE.SetCustomerNoVisibility(FALSE);
      CurrPage.CustomerStatisticsFactBox.PAGE.SetCustomerNoVisibility(FALSE);
    END;

    LOCAL PROCEDURE SetWorkflowManagementEnabledState@4();
    VAR
      WorkflowManagement@1001 : Codeunit 1501;
      WorkflowEventHandling@1000 : Codeunit 1520;
    BEGIN
      EventFilter := WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode + '|' +
        WorkflowEventHandling.RunWorkflowOnCustomerChangedCode;

      EnabledApprovalWorkflowsExist := WorkflowManagement.EnabledWorkflowExist(DATABASE::Customer,EventFilter);
    END;

    [Integration]
    PROCEDURE SetCaption@17(VAR InText@1000 : Text);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Page 50000 SDH Demo Entry
{
  OBJECT-PROPERTIES
  {
    Date=08/24/24;
    Time=12:42:37 PM;
    Modified=Yes;
    Version List=UPGDemo;
  }
  PROPERTIES
  {
    SourceTable=Table50000;
    PageType=List;
  }
  CONTROLS
  {
    { 1240060000;0;Container;
                ContainerType=ContentArea }

    { 1240060001;1;Group  ;
                Name=Group;
                GroupType=Repeater }

    { 1240060002;2;Field  ;
                SourceExpr="Entry No." }

    { 1240060003;2;Field  ;
                SourceExpr="G/L Account No." }

    { 1240060004;2;Field  ;
                SourceExpr="Posting Date" }

    { 1240060005;2;Field  ;
                SourceExpr="Document Type" }

    { 1240060006;2;Field  ;
                SourceExpr="Document No." }

    { 1240060007;2;Field  ;
                SourceExpr=Description }

    { 1240060008;2;Field  ;
                SourceExpr="Bal. Account No." }

    { 1240060009;2;Field  ;
                SourceExpr=Amount }

    { 1240060010;2;Field  ;
                SourceExpr="Global Dimension 1 Code" }

    { 1240060011;2;Field  ;
                SourceExpr="Global Dimension 2 Code" }

    { 1240060012;2;Field  ;
                SourceExpr="User ID" }

    { 1240060013;2;Field  ;
                SourceExpr="Source Code" }

    { 1240060014;2;Field  ;
                SourceExpr="System-Created Entry" }

    { 1240060015;2;Field  ;
                SourceExpr="Prior-Year Entry" }

    { 1240060016;2;Field  ;
                SourceExpr="Job No." }

    { 1240060017;2;Field  ;
                SourceExpr=Quantity }

    { 1240060018;2;Field  ;
                SourceExpr="VAT Amount" }

    { 1240060019;2;Field  ;
                SourceExpr="Business Unit Code" }

    { 1240060020;2;Field  ;
                SourceExpr="Journal Batch Name" }

    { 1240060021;2;Field  ;
                SourceExpr="Reason Code" }

    { 1240060022;2;Field  ;
                SourceExpr="Gen. Posting Type" }

    { 1240060023;2;Field  ;
                SourceExpr="Gen. Bus. Posting Group" }

    { 1240060024;2;Field  ;
                SourceExpr="Gen. Prod. Posting Group" }

    { 1240060025;2;Field  ;
                SourceExpr="Bal. Account Type" }

    { 1240060026;2;Field  ;
                SourceExpr="Transaction No." }

    { 1240060027;2;Field  ;
                SourceExpr="Debit Amount" }

    { 1240060028;2;Field  ;
                SourceExpr="Credit Amount" }

    { 1240060029;2;Field  ;
                SourceExpr="Document Date" }

    { 1240060030;2;Field  ;
                SourceExpr="External Document No." }

    { 1240060031;2;Field  ;
                SourceExpr="Source Type" }

    { 1240060032;2;Field  ;
                SourceExpr="Source No." }

    { 1240060033;2;Field  ;
                SourceExpr="No. Series" }

    { 1240060034;2;Field  ;
                SourceExpr="Tax Area Code" }

    { 1240060035;2;Field  ;
                SourceExpr="Tax Liable" }

    { 1240060036;2;Field  ;
                SourceExpr="Tax Group Code" }

    { 1240060037;2;Field  ;
                SourceExpr="Use Tax" }

    { 1240060038;2;Field  ;
                SourceExpr="VAT Bus. Posting Group" }

    { 1240060039;2;Field  ;
                SourceExpr="VAT Prod. Posting Group" }

    { 1240060040;2;Field  ;
                SourceExpr="Additional-Currency Amount" }

    { 1240060041;2;Field  ;
                SourceExpr="Add.-Currency Debit Amount" }

    { 1240060042;2;Field  ;
                SourceExpr="Add.-Currency Credit Amount" }

    { 1240060043;2;Field  ;
                SourceExpr="Close Income Statement Dim. ID" }

    { 1240060044;2;Field  ;
                SourceExpr="IC Partner Code" }

    { 1240060045;2;Field  ;
                SourceExpr=Reversed }

    { 1240060046;2;Field  ;
                SourceExpr="Reversed by Entry No." }

    { 1240060047;2;Field  ;
                SourceExpr="Reversed Entry No." }

  }
  CODE
  {

    BEGIN
    END.
  }
}

